{
  "item": [
    {
      "id": "07399ecd-4e39-4330-a4d2-6b49af5445e8",
      "name": "api/project/manage",
      "item": [
        {
          "id": "812f0274-88da-45db-add5-48aa8e8b7cea",
          "name": "create",
          "item": [
            {
              "id": "3b0016da-a480-4483-ad9b-1bdba26f3390",
              "name": "createGroup",
              "request": {
                "name": "createGroup",
                "description": {},
                "url": {
                  "path": [
                    "api",
                    "project",
                    "manage",
                    "create",
                    "group"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "method": "POST",
                "auth": null,
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"groupName\": \"{{groupName}}\",\n    \"groupShortform\": \"{{groupShortform}}\",\n    \"id\": \"{{id}}\",\n    \"num\": \"{{num}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [
                {
                  "id": "a68b2d0c-1907-4431-99f8-f332928a3af4",
                  "name": "OK",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "api",
                        "project",
                        "manage",
                        "create",
                        "group"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "*/*"
                      }
                    ],
                    "method": "POST",
                    "body": {}
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "*/*"
                    }
                  ],
                  "body": "ea tempor",
                  "cookie": [],
                  "_postman_previewlanguage": "text"
                },
                {
                  "id": "48550d1e-0a26-4572-8e77-1eb03ccb998c",
                  "name": "Created",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "api",
                        "project",
                        "manage",
                        "create",
                        "group"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "method": "POST",
                    "body": {}
                  },
                  "status": "Created",
                  "code": 201,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "_postman_previewlanguage": "text"
                },
                {
                  "id": "9af134d1-cd79-4ccf-9a91-050ad6f420e3",
                  "name": "Unauthorized",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "api",
                        "project",
                        "manage",
                        "create",
                        "group"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "method": "POST",
                    "body": {}
                  },
                  "status": "Unauthorized",
                  "code": 401,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "_postman_previewlanguage": "text"
                },
                {
                  "id": "bd36dd99-e55c-4e4b-8731-f84b2cf73dc0",
                  "name": "Forbidden",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "api",
                        "project",
                        "manage",
                        "create",
                        "group"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "method": "POST",
                    "body": {}
                  },
                  "status": "Forbidden",
                  "code": 403,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "_postman_previewlanguage": "text"
                },
                {
                  "id": "740ac317-5631-46d2-b1cc-0c5083f7bbd8",
                  "name": "Not Found",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "api",
                        "project",
                        "manage",
                        "create",
                        "group"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "method": "POST",
                    "body": {}
                  },
                  "status": "Not Found",
                  "code": 404,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "_postman_previewlanguage": "text"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test code-diff using AI Type Open AI and AI Model deepseek-ai/DeepSeek-R1-Distill-Llama-70B\n\n\nTest generated for /api/project/manage/create/group for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"OK\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n    });\n\n}\n\nif (pm.response.code == 201){\n    pm.test(\"Created\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Created\");\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Unauthorized\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n    });\n\n}\n\nif (pm.response.code == 403){\n    pm.test(\"Forbidden\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Forbidden\");\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n    });\n\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "23757176-b225-4f9b-96bc-1290967e0ce3",
              "name": "createGroup1",
              "request": {
                "name": "createGroup1",
                "description": {},
                "url": {
                  "path": [
                    "api",
                    "project",
                    "manage",
                    "create",
                    "group1"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "method": "POST",
                "auth": null,
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"groupName\": \"{{groupName}}\",\n    \"groupShortform\": \"{{groupShortform}}\",\n    \"id\": \"{{id}}\",\n    \"num\": \"{{num}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [
                {
                  "id": "e79eedcb-548f-4829-8e41-79651452e98d",
                  "name": "OK",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "api",
                        "project",
                        "manage",
                        "create",
                        "group1"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "*/*"
                      }
                    ],
                    "method": "POST",
                    "body": {}
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "*/*"
                    }
                  ],
                  "body": "ea tempor",
                  "cookie": [],
                  "_postman_previewlanguage": "text"
                },
                {
                  "id": "74212834-9f4d-434f-8432-3b9dc07dd65b",
                  "name": "Created",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "api",
                        "project",
                        "manage",
                        "create",
                        "group1"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "method": "POST",
                    "body": {}
                  },
                  "status": "Created",
                  "code": 201,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "_postman_previewlanguage": "text"
                },
                {
                  "id": "260e6d02-f37b-420d-bd37-f7f7e6598b48",
                  "name": "Unauthorized",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "api",
                        "project",
                        "manage",
                        "create",
                        "group1"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "method": "POST",
                    "body": {}
                  },
                  "status": "Unauthorized",
                  "code": 401,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "_postman_previewlanguage": "text"
                },
                {
                  "id": "82d6fed7-aa1b-4227-938d-5b0966e4a172",
                  "name": "Forbidden",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "api",
                        "project",
                        "manage",
                        "create",
                        "group1"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "method": "POST",
                    "body": {}
                  },
                  "status": "Forbidden",
                  "code": 403,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "_postman_previewlanguage": "text"
                },
                {
                  "id": "9c40e3ad-ec38-44a0-b68c-011fe1935954",
                  "name": "Not Found",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "api",
                        "project",
                        "manage",
                        "create",
                        "group1"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "method": "POST",
                    "body": {}
                  },
                  "status": "Not Found",
                  "code": 404,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "_postman_previewlanguage": "text"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test code-diff using AI Type Open AI and AI Model deepseek-ai/DeepSeek-R1-Distill-Llama-70B\n\n\nTest generated for /api/project/manage/create/group1 for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"OK\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n    });\n\n}\n\nif (pm.response.code == 201){\n    pm.test(\"Created\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Created\");\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Unauthorized\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n    });\n\n}\n\nif (pm.response.code == 403){\n    pm.test(\"Forbidden\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Forbidden\");\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n    });\n\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        {
          "id": "f0dc6adc-6586-4bda-aef1-b037ef59f5a7",
          "name": "getAllGroupList",
          "request": {
            "name": "getAllGroupList",
            "description": {},
            "url": {
              "path": [
                "api",
                "project",
                "manage",
                "select",
                "allGroups"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "method": "GET",
            "auth": null
          },
          "response": [
            {
              "id": "593a0ee2-d7e3-4c4e-969f-07fd033f3a10",
              "name": "OK",
              "originalRequest": {
                "url": {
                  "path": [
                    "api",
                    "project",
                    "manage",
                    "select",
                    "allGroups"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "body": "[\n  {\n    \"groupName\": \"<string>\",\n    \"groupShortform\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"num\": \"<integer>\"\n  },\n  {\n    \"groupName\": \"<string>\",\n    \"groupShortform\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"num\": \"<integer>\"\n  }\n]",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "7fcb5534-6a35-4f47-9a84-7642c579f75e",
              "name": "Unauthorized",
              "originalRequest": {
                "url": {
                  "path": [
                    "api",
                    "project",
                    "manage",
                    "select",
                    "allGroups"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "7b504887-b59c-4353-a132-4844b4753146",
              "name": "Forbidden",
              "originalRequest": {
                "url": {
                  "path": [
                    "api",
                    "project",
                    "manage",
                    "select",
                    "allGroups"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Forbidden",
              "code": 403,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "b4a554d7-d456-4289-b5da-39d203bde918",
              "name": "Not Found",
              "originalRequest": {
                "url": {
                  "path": [
                    "api",
                    "project",
                    "manage",
                    "select",
                    "allGroups"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Not Found",
              "code": 404,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test code-diff using AI Type Open AI and AI Model deepseek-ai/DeepSeek-R1-Distill-Llama-70B\n\n\nTest generated for /api/project/manage/select/allGroups for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"OK\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n          responseData.forEach((responseData) => {\n\n          });\n\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Unauthorized\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n    });\n\n}\n\nif (pm.response.code == 403){\n    pm.test(\"Forbidden\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Forbidden\");\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n    });\n\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        }
      ],
      "event": []
    },
    {
      "id": "5d61cbee-1407-4854-9078-ac35620049b3",
      "name": "error",
      "item": [
        {
          "id": "050a7510-fc00-48bd-93be-f8cbe752fc38",
          "name": "errorHtml",
          "request": {
            "name": "errorHtml",
            "description": {},
            "url": {
              "path": [
                "error"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "text/html"
              }
            ],
            "method": "GET",
            "auth": null
          },
          "response": [
            {
              "id": "d20bc990-109e-40de-a807-0b49290d2baf",
              "name": "OK",
              "originalRequest": {
                "url": {
                  "path": [
                    "error"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "text/html"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/html"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "a746305b-aaad-4e4c-9985-2b85cd66fa25",
              "name": "Unauthorized",
              "originalRequest": {
                "url": {
                  "path": [
                    "error"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "8a622a1e-5cea-46dd-8e5b-89e3d0304409",
              "name": "Forbidden",
              "originalRequest": {
                "url": {
                  "path": [
                    "error"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Forbidden",
              "code": 403,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "49fe16a8-d23c-4d88-927a-c19244b1ab60",
              "name": "Not Found",
              "originalRequest": {
                "url": {
                  "path": [
                    "error"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Not Found",
              "code": 404,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test code-diff using AI Type Open AI and AI Model deepseek-ai/DeepSeek-R1-Distill-Llama-70B\n\n\nTest generated for /error for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"OK\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n        pm.test('Response has the `empty` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`empty`)){\n                if(pm.expect(ld.get(pm.response.json(), `empty`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `empty`, null)).to.equal(\"boolean\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `model` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`model`)){\n                if(pm.expect(ld.get(pm.response.json(), `model`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `model`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `modelMap` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`modelMap`)){\n                if(pm.expect(ld.get(pm.response.json(), `modelMap`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `modelMap`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `reference` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`reference`)){\n                if(pm.expect(ld.get(pm.response.json(), `reference`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `reference`, null)).to.equal(\"boolean\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `status` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`status`)){\n                if(pm.expect(ld.get(pm.response.json(), `status`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `status`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('status to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"status\", \"\")).to.include.oneOf([\"ACCEPTED\",\"ALREADY_REPORTED\",\"BAD_GATEWAY\",\"BAD_REQUEST\",\"BANDWIDTH_LIMIT_EXCEEDED\",\"CHECKPOINT\",\"CONFLICT\",\"CONTINUE\",\"CREATED\",\"DESTINATION_LOCKED\",\"EXPECTATION_FAILED\",\"FAILED_DEPENDENCY\",\"FORBIDDEN\",\"FOUND\",\"GATEWAY_TIMEOUT\",\"GONE\",\"HTTP_VERSION_NOT_SUPPORTED\",\"IM_USED\",\"INSUFFICIENT_SPACE_ON_RESOURCE\",\"INSUFFICIENT_STORAGE\",\"INTERNAL_SERVER_ERROR\",\"I_AM_A_TEAPOT\",\"LENGTH_REQUIRED\",\"LOCKED\",\"LOOP_DETECTED\",\"METHOD_FAILURE\",\"METHOD_NOT_ALLOWED\",\"MOVED_PERMANENTLY\",\"MOVED_TEMPORARILY\",\"MULTIPLE_CHOICES\",\"MULTI_STATUS\",\"NETWORK_AUTHENTICATION_REQUIRED\",\"NON_AUTHORITATIVE_INFORMATION\",\"NOT_ACCEPTABLE\",\"NOT_EXTENDED\",\"NOT_FOUND\",\"NOT_IMPLEMENTED\",\"NOT_MODIFIED\",\"NO_CONTENT\",\"OK\",\"PARTIAL_CONTENT\",\"PAYLOAD_TOO_LARGE\",\"PAYMENT_REQUIRED\",\"PERMANENT_REDIRECT\",\"PRECONDITION_FAILED\",\"PRECONDITION_REQUIRED\",\"PROCESSING\",\"PROXY_AUTHENTICATION_REQUIRED\",\"REQUESTED_RANGE_NOT_SATISFIABLE\",\"REQUEST_ENTITY_TOO_LARGE\",\"REQUEST_HEADER_FIELDS_TOO_LARGE\",\"REQUEST_TIMEOUT\",\"REQUEST_URI_TOO_LONG\",\"RESET_CONTENT\",\"SEE_OTHER\",\"SERVICE_UNAVAILABLE\",\"SWITCHING_PROTOCOLS\",\"TEMPORARY_REDIRECT\",\"TOO_EARLY\",\"TOO_MANY_REQUESTS\",\"UNAUTHORIZED\",\"UNAVAILABLE_FOR_LEGAL_REASONS\",\"UNPROCESSABLE_ENTITY\",\"UNSUPPORTED_MEDIA_TYPE\",\"UPGRADE_REQUIRED\",\"URI_TOO_LONG\",\"USE_PROXY\",\"VARIANT_ALSO_NEGOTIATES\"]);\n        })\n\n        pm.test('Response has the `view` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`view`)){\n                if(pm.expect(ld.get(pm.response.json(), `view`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `view`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `view.contentType` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`view.contentType`)){\n                if(pm.expect(ld.get(pm.response.json(), `view.contentType`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `view.contentType`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `viewName` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`viewName`)){\n                if(pm.expect(ld.get(pm.response.json(), `viewName`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `viewName`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Unauthorized\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n    });\n\n}\n\nif (pm.response.code == 403){\n    pm.test(\"Forbidden\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Forbidden\");\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n    });\n\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        null,
        {
          "id": "ce214daf-fbf1-413b-9e5a-f084fb1fb7bc",
          "name": "errorHtml",
          "request": {
            "name": "errorHtml",
            "description": {},
            "url": {
              "path": [
                "error"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "text/html"
              }
            ],
            "method": "POST",
            "auth": null
          },
          "response": [
            {
              "id": "b2757213-2a6c-4a3c-a683-a9c9ae20dcd1",
              "name": "OK",
              "originalRequest": {
                "url": {
                  "path": [
                    "error"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "text/html"
                  }
                ],
                "method": "POST",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/html"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "49562cb1-9dd5-4ed3-ba97-ca36be4434cd",
              "name": "Created",
              "originalRequest": {
                "url": {
                  "path": [
                    "error"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {}
              },
              "status": "Created",
              "code": 201,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "78b82df1-fc8b-4d5d-89a3-384139020583",
              "name": "Unauthorized",
              "originalRequest": {
                "url": {
                  "path": [
                    "error"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {}
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "dc110043-3d19-42d3-96b7-06769be2a51b",
              "name": "Forbidden",
              "originalRequest": {
                "url": {
                  "path": [
                    "error"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {}
              },
              "status": "Forbidden",
              "code": 403,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "fa595dcc-8945-46b9-98c3-d3f4ea9455e8",
              "name": "Not Found",
              "originalRequest": {
                "url": {
                  "path": [
                    "error"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {}
              },
              "status": "Not Found",
              "code": 404,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test code-diff using AI Type Open AI and AI Model deepseek-ai/DeepSeek-R1-Distill-Llama-70B\n\n\nTest generated for /error for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"OK\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n        pm.test('Response has the `empty` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`empty`)){\n                if(pm.expect(ld.get(pm.response.json(), `empty`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `empty`, null)).to.equal(\"boolean\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `model` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`model`)){\n                if(pm.expect(ld.get(pm.response.json(), `model`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `model`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `modelMap` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`modelMap`)){\n                if(pm.expect(ld.get(pm.response.json(), `modelMap`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `modelMap`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `reference` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`reference`)){\n                if(pm.expect(ld.get(pm.response.json(), `reference`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `reference`, null)).to.equal(\"boolean\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `status` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`status`)){\n                if(pm.expect(ld.get(pm.response.json(), `status`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `status`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('status to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"status\", \"\")).to.include.oneOf([\"ACCEPTED\",\"ALREADY_REPORTED\",\"BAD_GATEWAY\",\"BAD_REQUEST\",\"BANDWIDTH_LIMIT_EXCEEDED\",\"CHECKPOINT\",\"CONFLICT\",\"CONTINUE\",\"CREATED\",\"DESTINATION_LOCKED\",\"EXPECTATION_FAILED\",\"FAILED_DEPENDENCY\",\"FORBIDDEN\",\"FOUND\",\"GATEWAY_TIMEOUT\",\"GONE\",\"HTTP_VERSION_NOT_SUPPORTED\",\"IM_USED\",\"INSUFFICIENT_SPACE_ON_RESOURCE\",\"INSUFFICIENT_STORAGE\",\"INTERNAL_SERVER_ERROR\",\"I_AM_A_TEAPOT\",\"LENGTH_REQUIRED\",\"LOCKED\",\"LOOP_DETECTED\",\"METHOD_FAILURE\",\"METHOD_NOT_ALLOWED\",\"MOVED_PERMANENTLY\",\"MOVED_TEMPORARILY\",\"MULTIPLE_CHOICES\",\"MULTI_STATUS\",\"NETWORK_AUTHENTICATION_REQUIRED\",\"NON_AUTHORITATIVE_INFORMATION\",\"NOT_ACCEPTABLE\",\"NOT_EXTENDED\",\"NOT_FOUND\",\"NOT_IMPLEMENTED\",\"NOT_MODIFIED\",\"NO_CONTENT\",\"OK\",\"PARTIAL_CONTENT\",\"PAYLOAD_TOO_LARGE\",\"PAYMENT_REQUIRED\",\"PERMANENT_REDIRECT\",\"PRECONDITION_FAILED\",\"PRECONDITION_REQUIRED\",\"PROCESSING\",\"PROXY_AUTHENTICATION_REQUIRED\",\"REQUESTED_RANGE_NOT_SATISFIABLE\",\"REQUEST_ENTITY_TOO_LARGE\",\"REQUEST_HEADER_FIELDS_TOO_LARGE\",\"REQUEST_TIMEOUT\",\"REQUEST_URI_TOO_LONG\",\"RESET_CONTENT\",\"SEE_OTHER\",\"SERVICE_UNAVAILABLE\",\"SWITCHING_PROTOCOLS\",\"TEMPORARY_REDIRECT\",\"TOO_EARLY\",\"TOO_MANY_REQUESTS\",\"UNAUTHORIZED\",\"UNAVAILABLE_FOR_LEGAL_REASONS\",\"UNPROCESSABLE_ENTITY\",\"UNSUPPORTED_MEDIA_TYPE\",\"UPGRADE_REQUIRED\",\"URI_TOO_LONG\",\"USE_PROXY\",\"VARIANT_ALSO_NEGOTIATES\"]);\n        })\n\n        pm.test('Response has the `view` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`view`)){\n                if(pm.expect(ld.get(pm.response.json(), `view`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `view`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `view.contentType` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`view.contentType`)){\n                if(pm.expect(ld.get(pm.response.json(), `view.contentType`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `view.contentType`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `viewName` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`viewName`)){\n                if(pm.expect(ld.get(pm.response.json(), `viewName`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `viewName`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 201){\n    pm.test(\"Created\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Created\");\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Unauthorized\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n    });\n\n}\n\nif (pm.response.code == 403){\n    pm.test(\"Forbidden\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Forbidden\");\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n    });\n\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "555d285d-39be-4964-ae91-de6d6e3f9f67",
          "name": "errorHtml",
          "request": {
            "name": "errorHtml",
            "description": {},
            "url": {
              "path": [
                "error"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "text/html"
              }
            ],
            "method": "PUT",
            "auth": null
          },
          "response": [
            {
              "id": "ad007385-c86a-4b36-bce4-67bc98844886",
              "name": "OK",
              "originalRequest": {
                "url": {
                  "path": [
                    "error"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "text/html"
                  }
                ],
                "method": "PUT",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/html"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "7e427e90-4346-4773-afb0-2c295efecd85",
              "name": "Created",
              "originalRequest": {
                "url": {
                  "path": [
                    "error"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PUT",
                "body": {}
              },
              "status": "Created",
              "code": 201,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "b64a6405-10f6-4268-aab9-917ebfccdc17",
              "name": "Unauthorized",
              "originalRequest": {
                "url": {
                  "path": [
                    "error"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PUT",
                "body": {}
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "c325f85f-230b-43cf-b0af-8ed51dbb8eef",
              "name": "Forbidden",
              "originalRequest": {
                "url": {
                  "path": [
                    "error"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PUT",
                "body": {}
              },
              "status": "Forbidden",
              "code": 403,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "20437567-f83e-4d3c-868b-82d9668b3664",
              "name": "Not Found",
              "originalRequest": {
                "url": {
                  "path": [
                    "error"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PUT",
                "body": {}
              },
              "status": "Not Found",
              "code": 404,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test code-diff using AI Type Open AI and AI Model deepseek-ai/DeepSeek-R1-Distill-Llama-70B\n\n\nTest generated for /error for http method type put in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"OK\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n        pm.test('Response has the `empty` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`empty`)){\n                if(pm.expect(ld.get(pm.response.json(), `empty`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `empty`, null)).to.equal(\"boolean\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `model` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`model`)){\n                if(pm.expect(ld.get(pm.response.json(), `model`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `model`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `modelMap` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`modelMap`)){\n                if(pm.expect(ld.get(pm.response.json(), `modelMap`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `modelMap`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `reference` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`reference`)){\n                if(pm.expect(ld.get(pm.response.json(), `reference`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `reference`, null)).to.equal(\"boolean\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `status` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`status`)){\n                if(pm.expect(ld.get(pm.response.json(), `status`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `status`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('status to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"status\", \"\")).to.include.oneOf([\"ACCEPTED\",\"ALREADY_REPORTED\",\"BAD_GATEWAY\",\"BAD_REQUEST\",\"BANDWIDTH_LIMIT_EXCEEDED\",\"CHECKPOINT\",\"CONFLICT\",\"CONTINUE\",\"CREATED\",\"DESTINATION_LOCKED\",\"EXPECTATION_FAILED\",\"FAILED_DEPENDENCY\",\"FORBIDDEN\",\"FOUND\",\"GATEWAY_TIMEOUT\",\"GONE\",\"HTTP_VERSION_NOT_SUPPORTED\",\"IM_USED\",\"INSUFFICIENT_SPACE_ON_RESOURCE\",\"INSUFFICIENT_STORAGE\",\"INTERNAL_SERVER_ERROR\",\"I_AM_A_TEAPOT\",\"LENGTH_REQUIRED\",\"LOCKED\",\"LOOP_DETECTED\",\"METHOD_FAILURE\",\"METHOD_NOT_ALLOWED\",\"MOVED_PERMANENTLY\",\"MOVED_TEMPORARILY\",\"MULTIPLE_CHOICES\",\"MULTI_STATUS\",\"NETWORK_AUTHENTICATION_REQUIRED\",\"NON_AUTHORITATIVE_INFORMATION\",\"NOT_ACCEPTABLE\",\"NOT_EXTENDED\",\"NOT_FOUND\",\"NOT_IMPLEMENTED\",\"NOT_MODIFIED\",\"NO_CONTENT\",\"OK\",\"PARTIAL_CONTENT\",\"PAYLOAD_TOO_LARGE\",\"PAYMENT_REQUIRED\",\"PERMANENT_REDIRECT\",\"PRECONDITION_FAILED\",\"PRECONDITION_REQUIRED\",\"PROCESSING\",\"PROXY_AUTHENTICATION_REQUIRED\",\"REQUESTED_RANGE_NOT_SATISFIABLE\",\"REQUEST_ENTITY_TOO_LARGE\",\"REQUEST_HEADER_FIELDS_TOO_LARGE\",\"REQUEST_TIMEOUT\",\"REQUEST_URI_TOO_LONG\",\"RESET_CONTENT\",\"SEE_OTHER\",\"SERVICE_UNAVAILABLE\",\"SWITCHING_PROTOCOLS\",\"TEMPORARY_REDIRECT\",\"TOO_EARLY\",\"TOO_MANY_REQUESTS\",\"UNAUTHORIZED\",\"UNAVAILABLE_FOR_LEGAL_REASONS\",\"UNPROCESSABLE_ENTITY\",\"UNSUPPORTED_MEDIA_TYPE\",\"UPGRADE_REQUIRED\",\"URI_TOO_LONG\",\"USE_PROXY\",\"VARIANT_ALSO_NEGOTIATES\"]);\n        })\n\n        pm.test('Response has the `view` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`view`)){\n                if(pm.expect(ld.get(pm.response.json(), `view`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `view`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `view.contentType` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`view.contentType`)){\n                if(pm.expect(ld.get(pm.response.json(), `view.contentType`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `view.contentType`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `viewName` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`viewName`)){\n                if(pm.expect(ld.get(pm.response.json(), `viewName`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `viewName`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 201){\n    pm.test(\"Created\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Created\");\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Unauthorized\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n    });\n\n}\n\nif (pm.response.code == 403){\n    pm.test(\"Forbidden\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Forbidden\");\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n    });\n\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "8e87528c-05df-440c-9478-f50989b4da0b",
          "name": "errorHtml",
          "request": {
            "name": "errorHtml",
            "description": {},
            "url": {
              "path": [
                "error"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "text/html"
              }
            ],
            "method": "DELETE",
            "auth": null
          },
          "response": [
            {
              "id": "7c43b302-cb05-4ab0-b288-74565847f001",
              "name": "OK",
              "originalRequest": {
                "url": {
                  "path": [
                    "error"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "text/html"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/html"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "4a0f2f09-828c-4f35-abd6-8238656ec6c2",
              "name": "No Content",
              "originalRequest": {
                "url": {
                  "path": [
                    "error"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE",
                "body": {}
              },
              "status": "No Content",
              "code": 204,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "63672b61-5e82-4fcb-8961-f511031519fa",
              "name": "Unauthorized",
              "originalRequest": {
                "url": {
                  "path": [
                    "error"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE",
                "body": {}
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "da396911-35f6-4cdf-9879-e2d79962c402",
              "name": "Forbidden",
              "originalRequest": {
                "url": {
                  "path": [
                    "error"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE",
                "body": {}
              },
              "status": "Forbidden",
              "code": 403,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test code-diff using AI Type Open AI and AI Model deepseek-ai/DeepSeek-R1-Distill-Llama-70B\n\n\nTest generated for /error for http method type delete in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"OK\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n        pm.test('Response has the `empty` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`empty`)){\n                if(pm.expect(ld.get(pm.response.json(), `empty`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `empty`, null)).to.equal(\"boolean\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `model` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`model`)){\n                if(pm.expect(ld.get(pm.response.json(), `model`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `model`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `modelMap` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`modelMap`)){\n                if(pm.expect(ld.get(pm.response.json(), `modelMap`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `modelMap`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `reference` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`reference`)){\n                if(pm.expect(ld.get(pm.response.json(), `reference`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `reference`, null)).to.equal(\"boolean\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `status` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`status`)){\n                if(pm.expect(ld.get(pm.response.json(), `status`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `status`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('status to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"status\", \"\")).to.include.oneOf([\"ACCEPTED\",\"ALREADY_REPORTED\",\"BAD_GATEWAY\",\"BAD_REQUEST\",\"BANDWIDTH_LIMIT_EXCEEDED\",\"CHECKPOINT\",\"CONFLICT\",\"CONTINUE\",\"CREATED\",\"DESTINATION_LOCKED\",\"EXPECTATION_FAILED\",\"FAILED_DEPENDENCY\",\"FORBIDDEN\",\"FOUND\",\"GATEWAY_TIMEOUT\",\"GONE\",\"HTTP_VERSION_NOT_SUPPORTED\",\"IM_USED\",\"INSUFFICIENT_SPACE_ON_RESOURCE\",\"INSUFFICIENT_STORAGE\",\"INTERNAL_SERVER_ERROR\",\"I_AM_A_TEAPOT\",\"LENGTH_REQUIRED\",\"LOCKED\",\"LOOP_DETECTED\",\"METHOD_FAILURE\",\"METHOD_NOT_ALLOWED\",\"MOVED_PERMANENTLY\",\"MOVED_TEMPORARILY\",\"MULTIPLE_CHOICES\",\"MULTI_STATUS\",\"NETWORK_AUTHENTICATION_REQUIRED\",\"NON_AUTHORITATIVE_INFORMATION\",\"NOT_ACCEPTABLE\",\"NOT_EXTENDED\",\"NOT_FOUND\",\"NOT_IMPLEMENTED\",\"NOT_MODIFIED\",\"NO_CONTENT\",\"OK\",\"PARTIAL_CONTENT\",\"PAYLOAD_TOO_LARGE\",\"PAYMENT_REQUIRED\",\"PERMANENT_REDIRECT\",\"PRECONDITION_FAILED\",\"PRECONDITION_REQUIRED\",\"PROCESSING\",\"PROXY_AUTHENTICATION_REQUIRED\",\"REQUESTED_RANGE_NOT_SATISFIABLE\",\"REQUEST_ENTITY_TOO_LARGE\",\"REQUEST_HEADER_FIELDS_TOO_LARGE\",\"REQUEST_TIMEOUT\",\"REQUEST_URI_TOO_LONG\",\"RESET_CONTENT\",\"SEE_OTHER\",\"SERVICE_UNAVAILABLE\",\"SWITCHING_PROTOCOLS\",\"TEMPORARY_REDIRECT\",\"TOO_EARLY\",\"TOO_MANY_REQUESTS\",\"UNAUTHORIZED\",\"UNAVAILABLE_FOR_LEGAL_REASONS\",\"UNPROCESSABLE_ENTITY\",\"UNSUPPORTED_MEDIA_TYPE\",\"UPGRADE_REQUIRED\",\"URI_TOO_LONG\",\"USE_PROXY\",\"VARIANT_ALSO_NEGOTIATES\"]);\n        })\n\n        pm.test('Response has the `view` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`view`)){\n                if(pm.expect(ld.get(pm.response.json(), `view`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `view`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `view.contentType` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`view.contentType`)){\n                if(pm.expect(ld.get(pm.response.json(), `view.contentType`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `view.contentType`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `viewName` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`viewName`)){\n                if(pm.expect(ld.get(pm.response.json(), `viewName`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `viewName`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 204){\n    pm.test(\"No Content\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"No Content\");\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Unauthorized\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n    });\n\n}\n\nif (pm.response.code == 403){\n    pm.test(\"Forbidden\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Forbidden\");\n    });\n\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        null,
        {
          "id": "28820c5e-ac95-46f2-ab7c-52fb32eb4151",
          "name": "errorHtml",
          "request": {
            "name": "errorHtml",
            "description": {},
            "url": {
              "path": [
                "error"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "text/html"
              }
            ],
            "method": "PATCH",
            "auth": null
          },
          "response": [
            {
              "id": "92f98062-ab1b-4e4c-af23-9a179db8cacd",
              "name": "OK",
              "originalRequest": {
                "url": {
                  "path": [
                    "error"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "text/html"
                  }
                ],
                "method": "PATCH",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/html"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "b7f10d17-f77f-4839-8a13-cb926dbe56bc",
              "name": "No Content",
              "originalRequest": {
                "url": {
                  "path": [
                    "error"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PATCH",
                "body": {}
              },
              "status": "No Content",
              "code": 204,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "4b78f01f-86ed-4669-a36c-28479814acbf",
              "name": "Unauthorized",
              "originalRequest": {
                "url": {
                  "path": [
                    "error"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PATCH",
                "body": {}
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "b3401345-88a1-42a8-9afb-120ee1e05f5c",
              "name": "Forbidden",
              "originalRequest": {
                "url": {
                  "path": [
                    "error"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PATCH",
                "body": {}
              },
              "status": "Forbidden",
              "code": 403,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test code-diff using AI Type Open AI and AI Model deepseek-ai/DeepSeek-R1-Distill-Llama-70B\n\n\nTest generated for /error for http method type patch in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"OK\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n        pm.test('Response has the `empty` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`empty`)){\n                if(pm.expect(ld.get(pm.response.json(), `empty`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `empty`, null)).to.equal(\"boolean\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `model` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`model`)){\n                if(pm.expect(ld.get(pm.response.json(), `model`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `model`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `modelMap` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`modelMap`)){\n                if(pm.expect(ld.get(pm.response.json(), `modelMap`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `modelMap`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `reference` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`reference`)){\n                if(pm.expect(ld.get(pm.response.json(), `reference`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `reference`, null)).to.equal(\"boolean\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `status` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`status`)){\n                if(pm.expect(ld.get(pm.response.json(), `status`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `status`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n \n        pm.test('status to be one of enum', function(){ \n            pm.expect(ld.get(responseData, \"status\", \"\")).to.include.oneOf([\"ACCEPTED\",\"ALREADY_REPORTED\",\"BAD_GATEWAY\",\"BAD_REQUEST\",\"BANDWIDTH_LIMIT_EXCEEDED\",\"CHECKPOINT\",\"CONFLICT\",\"CONTINUE\",\"CREATED\",\"DESTINATION_LOCKED\",\"EXPECTATION_FAILED\",\"FAILED_DEPENDENCY\",\"FORBIDDEN\",\"FOUND\",\"GATEWAY_TIMEOUT\",\"GONE\",\"HTTP_VERSION_NOT_SUPPORTED\",\"IM_USED\",\"INSUFFICIENT_SPACE_ON_RESOURCE\",\"INSUFFICIENT_STORAGE\",\"INTERNAL_SERVER_ERROR\",\"I_AM_A_TEAPOT\",\"LENGTH_REQUIRED\",\"LOCKED\",\"LOOP_DETECTED\",\"METHOD_FAILURE\",\"METHOD_NOT_ALLOWED\",\"MOVED_PERMANENTLY\",\"MOVED_TEMPORARILY\",\"MULTIPLE_CHOICES\",\"MULTI_STATUS\",\"NETWORK_AUTHENTICATION_REQUIRED\",\"NON_AUTHORITATIVE_INFORMATION\",\"NOT_ACCEPTABLE\",\"NOT_EXTENDED\",\"NOT_FOUND\",\"NOT_IMPLEMENTED\",\"NOT_MODIFIED\",\"NO_CONTENT\",\"OK\",\"PARTIAL_CONTENT\",\"PAYLOAD_TOO_LARGE\",\"PAYMENT_REQUIRED\",\"PERMANENT_REDIRECT\",\"PRECONDITION_FAILED\",\"PRECONDITION_REQUIRED\",\"PROCESSING\",\"PROXY_AUTHENTICATION_REQUIRED\",\"REQUESTED_RANGE_NOT_SATISFIABLE\",\"REQUEST_ENTITY_TOO_LARGE\",\"REQUEST_HEADER_FIELDS_TOO_LARGE\",\"REQUEST_TIMEOUT\",\"REQUEST_URI_TOO_LONG\",\"RESET_CONTENT\",\"SEE_OTHER\",\"SERVICE_UNAVAILABLE\",\"SWITCHING_PROTOCOLS\",\"TEMPORARY_REDIRECT\",\"TOO_EARLY\",\"TOO_MANY_REQUESTS\",\"UNAUTHORIZED\",\"UNAVAILABLE_FOR_LEGAL_REASONS\",\"UNPROCESSABLE_ENTITY\",\"UNSUPPORTED_MEDIA_TYPE\",\"UPGRADE_REQUIRED\",\"URI_TOO_LONG\",\"USE_PROXY\",\"VARIANT_ALSO_NEGOTIATES\"]);\n        })\n\n        pm.test('Response has the `view` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`view`)){\n                if(pm.expect(ld.get(pm.response.json(), `view`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `view`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `view.contentType` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`view.contentType`)){\n                if(pm.expect(ld.get(pm.response.json(), `view.contentType`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `view.contentType`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `viewName` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`viewName`)){\n                if(pm.expect(ld.get(pm.response.json(), `viewName`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `viewName`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 204){\n    pm.test(\"No Content\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"No Content\");\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Unauthorized\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n    });\n\n}\n\nif (pm.response.code == 403){\n    pm.test(\"Forbidden\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Forbidden\");\n    });\n\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        }
      ],
      "event": []
    },
    {
      "id": "2d06d74b-41b7-4fc7-939d-f8f52de75b30",
      "name": "jacoco",
      "item": [
        {
          "id": "e395af67-00a2-4161-b198-8029ecb3d0dc",
          "name": "addTest1",
          "request": {
            "name": "addTest1",
            "description": {},
            "url": {
              "path": [
                "jacoco",
                "addTest1"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": false,
                  "key": "password",
                  "value": "{{password}}",
                  "description": "password"
                },
                {
                  "disabled": false,
                  "key": "userName",
                  "value": "{{userName}}",
                  "description": "userName"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "method": "GET",
            "auth": null
          },
          "response": [
            {
              "id": "4f4139e5-3b4f-4915-914f-a0a0fa569395",
              "name": "OK",
              "originalRequest": {
                "url": {
                  "path": [
                    "jacoco",
                    "addTest1"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "body": "ea tempor",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "7a620b2c-6c3e-479b-a692-0ff612c61b85",
              "name": "Unauthorized",
              "originalRequest": {
                "url": {
                  "path": [
                    "jacoco",
                    "addTest1"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "025fab7d-c7f5-4c47-b57f-00e1888bb94b",
              "name": "Forbidden",
              "originalRequest": {
                "url": {
                  "path": [
                    "jacoco",
                    "addTest1"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Forbidden",
              "code": 403,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "2134159a-ed14-4900-ae55-eeb046d49f10",
              "name": "Not Found",
              "originalRequest": {
                "url": {
                  "path": [
                    "jacoco",
                    "addTest1"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Not Found",
              "code": 404,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test code-diff using AI Type Open AI and AI Model deepseek-ai/DeepSeek-R1-Distill-Llama-70B\n\n\nTest generated for /jacoco/addTest1?password=<string>&userName=<string> for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"OK\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n          pm.response.to.have.header(\"Content-Type\");\n\nif (pm.response.code == 401){\n    pm.test(\"Unauthorized\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n      });\n\n    }\n\nif (pm.response.code == 403){\n    pm.test(\"Forbidden\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Forbidden\");\n      });\n\n    }\n\nif (pm.response.code == 404){\n    pm.test(\"Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n      });\n\n    }\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "d92773e1-2b23-4f7b-825a-64ddd677ba39",
          "name": "addTest2",
          "request": {
            "name": "addTest2",
            "description": {},
            "url": {
              "path": [
                "jacoco",
                "addTest2"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": false,
                  "key": "password",
                  "value": "{{password}}",
                  "description": "password"
                },
                {
                  "disabled": false,
                  "key": "userName",
                  "value": "{{userName}}",
                  "description": "userName"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "method": "GET",
            "auth": null
          },
          "response": [
            {
              "id": "2b32cfec-f5ed-4885-9491-444407a483f5",
              "name": "OK",
              "originalRequest": {
                "url": {
                  "path": [
                    "jacoco",
                    "addTest2"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "body": "ea tempor",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "1a8896c7-3fe2-450a-9909-c36b4ef0f7f6",
              "name": "Unauthorized",
              "originalRequest": {
                "url": {
                  "path": [
                    "jacoco",
                    "addTest2"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "adc99c23-63fb-46a3-88c2-50b3e4926160",
              "name": "Forbidden",
              "originalRequest": {
                "url": {
                  "path": [
                    "jacoco",
                    "addTest2"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Forbidden",
              "code": 403,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "184fa513-2b52-438c-ab86-732617d6872b",
              "name": "Not Found",
              "originalRequest": {
                "url": {
                  "path": [
                    "jacoco",
                    "addTest2"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Not Found",
              "code": 404,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test code-diff using AI Type Open AI and AI Model deepseek-ai/DeepSeek-R1-Distill-Llama-70B\n\n\nTest generated for /jacoco/addTest2?password=<string>&userName=<string> for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"OK\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n          pm.response.to.have.header(\"Content-Type\");\n\nif (pm.response.code == 401){\n    pm.test(\"Unauthorized\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n      });\n\n    }\n\nif (pm.response.code == 403){\n    pm.test(\"Forbidden\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Forbidden\");\n      });\n\n    }\n\nif (pm.response.code == 404){\n    pm.test(\"Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n      });\n\n    }\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "f53cb328-5899-4e86-9057-121a651ef557",
          "name": "addTest3",
          "request": {
            "name": "addTest3",
            "description": {},
            "url": {
              "path": [
                "jacoco",
                "addTest3"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": false,
                  "key": "password",
                  "value": "{{password}}",
                  "description": "password"
                },
                {
                  "disabled": false,
                  "key": "userName",
                  "value": "{{userName}}",
                  "description": "userName"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "method": "GET",
            "auth": null
          },
          "response": [
            {
              "id": "e6d06992-18c8-48ba-a58f-06ddb632d457",
              "name": "OK",
              "originalRequest": {
                "url": {
                  "path": [
                    "jacoco",
                    "addTest3"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "body": "ea tempor",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "c8b05232-6123-4076-b58f-34c94bed27d2",
              "name": "Unauthorized",
              "originalRequest": {
                "url": {
                  "path": [
                    "jacoco",
                    "addTest3"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "262f0ce5-d002-453a-9dde-79e15130791f",
              "name": "Forbidden",
              "originalRequest": {
                "url": {
                  "path": [
                    "jacoco",
                    "addTest3"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Forbidden",
              "code": 403,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "56eea731-c22d-4ac0-b5db-2b2dfec3d7e7",
              "name": "Not Found",
              "originalRequest": {
                "url": {
                  "path": [
                    "jacoco",
                    "addTest3"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Not Found",
              "code": 404,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test code-diff using AI Type Open AI and AI Model deepseek-ai/DeepSeek-R1-Distill-Llama-70B\n\n\nTest generated for /jacoco/addTest3?password=<string>&userName=<string> for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"OK\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n          pm.response.to.have.header(\"Content-Type\");\n\nif (pm.response.code == 401){\n    pm.test(\"Unauthorized\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n      });\n\n    }\n\nif (pm.response.code == 403){\n    pm.test(\"Forbidden\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Forbidden\");\n      });\n\n    }\n\nif (pm.response.code == 404){\n    pm.test(\"Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n      });\n\n    }\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "3f7bbb02-a651-4def-bf6a-9d0ee0ea111e",
          "name": "addTest4",
          "request": {
            "name": "addTest4",
            "description": {},
            "url": {
              "path": [
                "jacoco",
                "addTest4"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": false,
                  "key": "password",
                  "value": "{{password}}",
                  "description": "password"
                },
                {
                  "disabled": false,
                  "key": "userName",
                  "value": "{{userName}}",
                  "description": "userName"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "method": "GET",
            "auth": null
          },
          "response": [
            {
              "id": "93c0bebe-f8b2-4e27-9c28-d8186fab2bff",
              "name": "OK",
              "originalRequest": {
                "url": {
                  "path": [
                    "jacoco",
                    "addTest4"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "body": "ea tempor",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "bfd8876c-8d62-4b7c-a595-bc5fe77df8ab",
              "name": "Unauthorized",
              "originalRequest": {
                "url": {
                  "path": [
                    "jacoco",
                    "addTest4"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "c59c036b-194c-476c-8481-14657ec876d5",
              "name": "Forbidden",
              "originalRequest": {
                "url": {
                  "path": [
                    "jacoco",
                    "addTest4"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Forbidden",
              "code": 403,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "536eefd4-0edf-4b1a-950f-e97d8e70e156",
              "name": "Not Found",
              "originalRequest": {
                "url": {
                  "path": [
                    "jacoco",
                    "addTest4"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Not Found",
              "code": 404,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test code-diff using AI Type Open AI and AI Model deepseek-ai/DeepSeek-R1-Distill-Llama-70B\n\n\nTest generated for /jacoco/addTest4?password=<string>&userName=<string> for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"OK\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n          pm.response.to.have.header(\"Content-Type\");\n\nif (pm.response.code == 401){\n    pm.test(\"Unauthorized\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n      });\n\n    }\n\nif (pm.response.code == 403){\n    pm.test(\"Forbidden\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Forbidden\");\n      });\n\n    }\n\nif (pm.response.code == 404){\n    pm.test(\"Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n      });\n\n    }\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "f4546945-ce6a-4e49-b553-89520aff04bb",
          "name": "addTest5",
          "request": {
            "name": "addTest5",
            "description": {},
            "url": {
              "path": [
                "jacoco",
                "addTest5"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": false,
                  "key": "password",
                  "value": "{{password}}",
                  "description": "password"
                },
                {
                  "disabled": false,
                  "key": "userName",
                  "value": "{{userName}}",
                  "description": "userName"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "method": "GET",
            "auth": null
          },
          "response": [
            {
              "id": "a50d035d-760b-4005-a889-24d7d0c2ef05",
              "name": "OK",
              "originalRequest": {
                "url": {
                  "path": [
                    "jacoco",
                    "addTest5"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "body": "ea tempor",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "5fd9a47c-c458-4f4f-b108-659b0b28fd24",
              "name": "Unauthorized",
              "originalRequest": {
                "url": {
                  "path": [
                    "jacoco",
                    "addTest5"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "d619b495-2006-4dbd-9861-0a7061a895b7",
              "name": "Forbidden",
              "originalRequest": {
                "url": {
                  "path": [
                    "jacoco",
                    "addTest5"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Forbidden",
              "code": 403,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "4210a7e0-86c9-4dfa-a0bd-7d121d6933bf",
              "name": "Not Found",
              "originalRequest": {
                "url": {
                  "path": [
                    "jacoco",
                    "addTest5"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Not Found",
              "code": 404,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test code-diff using AI Type Open AI and AI Model deepseek-ai/DeepSeek-R1-Distill-Llama-70B\n\n\nTest generated for /jacoco/addTest5?password=<string>&userName=<string> for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"OK\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n          pm.response.to.have.header(\"Content-Type\");\n\nif (pm.response.code == 401){\n    pm.test(\"Unauthorized\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n      });\n\n    }\n\nif (pm.response.code == 403){\n    pm.test(\"Forbidden\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Forbidden\");\n      });\n\n    }\n\nif (pm.response.code == 404){\n    pm.test(\"Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n      });\n\n    }\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "f8979216-251d-455e-a0d6-efaa6980c404",
          "name": "getTest",
          "request": {
            "name": "getTest",
            "description": {},
            "url": {
              "path": [
                "jacoco",
                "getTest"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": false,
                  "key": "password",
                  "value": "{{password}}",
                  "description": "password"
                },
                {
                  "disabled": false,
                  "key": "userName",
                  "value": "{{userName}}",
                  "description": "userName"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "method": "GET",
            "auth": null
          },
          "response": [
            {
              "id": "815c11f6-6036-4969-8d67-6fefb77e4957",
              "name": "OK",
              "originalRequest": {
                "url": {
                  "path": [
                    "jacoco",
                    "getTest"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "body": "ea tempor",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "13e494d3-c797-4397-ad76-2068ee2d0ae3",
              "name": "Unauthorized",
              "originalRequest": {
                "url": {
                  "path": [
                    "jacoco",
                    "getTest"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "de0dfc1d-cee4-4bd8-a902-e58a97212672",
              "name": "Forbidden",
              "originalRequest": {
                "url": {
                  "path": [
                    "jacoco",
                    "getTest"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Forbidden",
              "code": 403,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "6d56056f-ed59-4f62-a31e-f88612b01ddb",
              "name": "Not Found",
              "originalRequest": {
                "url": {
                  "path": [
                    "jacoco",
                    "getTest"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Not Found",
              "code": 404,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test code-diff using AI Type Open AI and AI Model deepseek-ai/DeepSeek-R1-Distill-Llama-70B\n\n\nTest generated for /jacoco/getTest?password=<string>&userName=<string> for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"OK\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n          pm.response.to.have.header(\"Content-Type\");\n\nif (pm.response.code == 401){\n    pm.test(\"Unauthorized\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n      });\n\n    }\n\nif (pm.response.code == 403){\n    pm.test(\"Forbidden\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Forbidden\");\n      });\n\n    }\n\nif (pm.response.code == 404){\n    pm.test(\"Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n      });\n\n    }\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "ed48e7f5-4094-46ee-8244-42d42c168376",
          "name": "getTest1",
          "request": {
            "name": "getTest1",
            "description": {},
            "url": {
              "path": [
                "jacoco",
                "getTest1"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": false,
                  "key": "password",
                  "value": "{{password}}",
                  "description": "password"
                },
                {
                  "disabled": false,
                  "key": "userName",
                  "value": "{{userName}}",
                  "description": "userName"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "method": "GET",
            "auth": null
          },
          "response": [
            {
              "id": "c8a52c0d-9328-4c8d-9e35-f4e41466175a",
              "name": "OK",
              "originalRequest": {
                "url": {
                  "path": [
                    "jacoco",
                    "getTest1"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "body": "ea tempor",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "c7512b3f-6b0f-46da-8fe1-80ef136cec68",
              "name": "Unauthorized",
              "originalRequest": {
                "url": {
                  "path": [
                    "jacoco",
                    "getTest1"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "62818e1b-4621-4ce9-b612-4f28100e17a0",
              "name": "Forbidden",
              "originalRequest": {
                "url": {
                  "path": [
                    "jacoco",
                    "getTest1"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Forbidden",
              "code": 403,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "145bea6b-750d-41f1-adee-cc28a228e972",
              "name": "Not Found",
              "originalRequest": {
                "url": {
                  "path": [
                    "jacoco",
                    "getTest1"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Not Found",
              "code": 404,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test code-diff using AI Type Open AI and AI Model deepseek-ai/DeepSeek-R1-Distill-Llama-70B\n\n\nTest generated for /jacoco/getTest1?password=<string>&userName=<string> for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"OK\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n          pm.response.to.have.header(\"Content-Type\");\n\nif (pm.response.code == 401){\n    pm.test(\"Unauthorized\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n      });\n\n    }\n\nif (pm.response.code == 403){\n    pm.test(\"Forbidden\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Forbidden\");\n      });\n\n    }\n\nif (pm.response.code == 404){\n    pm.test(\"Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n      });\n\n    }\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "8cdd4a2a-ffca-4a3c-b8fc-ccee7783245d",
          "name": "getTest2",
          "request": {
            "name": "getTest2",
            "description": {},
            "url": {
              "path": [
                "jacoco",
                "getTest2"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": false,
                  "key": "password",
                  "value": "{{password}}",
                  "description": "password"
                },
                {
                  "disabled": false,
                  "key": "userName",
                  "value": "{{userName}}",
                  "description": "userName"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "method": "GET",
            "auth": null
          },
          "response": [
            {
              "id": "d66fe05e-76d2-46d0-86a3-a94486938b93",
              "name": "OK",
              "originalRequest": {
                "url": {
                  "path": [
                    "jacoco",
                    "getTest2"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "body": "ea tempor",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "004c6562-b8d2-47e0-946f-5e8bb2795270",
              "name": "Unauthorized",
              "originalRequest": {
                "url": {
                  "path": [
                    "jacoco",
                    "getTest2"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "b32284db-a852-4f2a-92e3-94eda0b08a39",
              "name": "Forbidden",
              "originalRequest": {
                "url": {
                  "path": [
                    "jacoco",
                    "getTest2"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Forbidden",
              "code": 403,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "7d787df8-bdda-4200-8bd8-8b8bcc6b3283",
              "name": "Not Found",
              "originalRequest": {
                "url": {
                  "path": [
                    "jacoco",
                    "getTest2"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Not Found",
              "code": 404,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test code-diff using AI Type Open AI and AI Model deepseek-ai/DeepSeek-R1-Distill-Llama-70B\n\n\nTest generated for /jacoco/getTest2?password=<string>&userName=<string> for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"OK\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n          pm.response.to.have.header(\"Content-Type\");\n\nif (pm.response.code == 401){\n    pm.test(\"Unauthorized\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n      });\n\n    }\n\nif (pm.response.code == 403){\n    pm.test(\"Forbidden\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Forbidden\");\n      });\n\n    }\n\nif (pm.response.code == 404){\n    pm.test(\"Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n      });\n\n    }\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "436454e9-b2a3-46be-98cb-4b9019038a92",
          "name": "getTest33",
          "request": {
            "name": "getTest33",
            "description": {},
            "url": {
              "path": [
                "jacoco",
                "getTest33"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": false,
                  "key": "password",
                  "value": "{{password}}",
                  "description": "password"
                },
                {
                  "disabled": false,
                  "key": "userName",
                  "value": "{{userName}}",
                  "description": "userName"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "method": "GET",
            "auth": null
          },
          "response": [
            {
              "id": "c849e2fb-9cba-4c04-a693-e21d6580a7e4",
              "name": "OK",
              "originalRequest": {
                "url": {
                  "path": [
                    "jacoco",
                    "getTest33"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "body": "ea tempor",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "8e0941a0-ceee-40f7-a9bc-e4e201d6e8e9",
              "name": "Unauthorized",
              "originalRequest": {
                "url": {
                  "path": [
                    "jacoco",
                    "getTest33"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "66daeba8-8604-4816-bf4a-411d908a3f26",
              "name": "Forbidden",
              "originalRequest": {
                "url": {
                  "path": [
                    "jacoco",
                    "getTest33"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Forbidden",
              "code": 403,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "72a12e6e-ab73-4fcc-bb70-27a153b980c2",
              "name": "Not Found",
              "originalRequest": {
                "url": {
                  "path": [
                    "jacoco",
                    "getTest33"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Not Found",
              "code": 404,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test code-diff using AI Type Open AI and AI Model deepseek-ai/DeepSeek-R1-Distill-Llama-70B\n\n\nTest generated for /jacoco/getTest33?password=<string>&userName=<string> for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"OK\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n          pm.response.to.have.header(\"Content-Type\");\n\nif (pm.response.code == 401){\n    pm.test(\"Unauthorized\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n      });\n\n    }\n\nif (pm.response.code == 403){\n    pm.test(\"Forbidden\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Forbidden\");\n      });\n\n    }\n\nif (pm.response.code == 404){\n    pm.test(\"Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n      });\n\n    }\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "12322744-19f9-4776-95db-1b058f9f0187",
          "name": "getTest4",
          "request": {
            "name": "getTest4",
            "description": {},
            "url": {
              "path": [
                "jacoco",
                "getTest4"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": false,
                  "key": "password",
                  "value": "{{password}}",
                  "description": "password"
                },
                {
                  "disabled": false,
                  "key": "userName",
                  "value": "{{userName}}",
                  "description": "userName"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "method": "GET",
            "auth": null
          },
          "response": [
            {
              "id": "7c7dfec3-7bb0-40c0-9bbf-3450f454225a",
              "name": "OK",
              "originalRequest": {
                "url": {
                  "path": [
                    "jacoco",
                    "getTest4"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "body": "ea tempor",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "b6a9c4e2-d8cd-4ce7-ad24-0bdd4cd43279",
              "name": "Unauthorized",
              "originalRequest": {
                "url": {
                  "path": [
                    "jacoco",
                    "getTest4"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "4e26bd58-dc40-43c4-b9d9-6351ef1aac16",
              "name": "Forbidden",
              "originalRequest": {
                "url": {
                  "path": [
                    "jacoco",
                    "getTest4"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Forbidden",
              "code": 403,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "0465ebb5-92a3-48ab-84b9-56b8109659d7",
              "name": "Not Found",
              "originalRequest": {
                "url": {
                  "path": [
                    "jacoco",
                    "getTest4"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Not Found",
              "code": 404,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test code-diff using AI Type Open AI and AI Model deepseek-ai/DeepSeek-R1-Distill-Llama-70B\n\n\nTest generated for /jacoco/getTest4?password=<string>&userName=<string> for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"OK\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n          pm.response.to.have.header(\"Content-Type\");\n\nif (pm.response.code == 401){\n    pm.test(\"Unauthorized\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n      });\n\n    }\n\nif (pm.response.code == 403){\n    pm.test(\"Forbidden\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Forbidden\");\n      });\n\n    }\n\nif (pm.response.code == 404){\n    pm.test(\"Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n      });\n\n    }\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "e38370ea-4343-43eb-916c-6c5cdc996dcc",
          "name": "getTest5",
          "request": {
            "name": "getTest5",
            "description": {},
            "url": {
              "path": [
                "jacoco",
                "getTest5"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": false,
                  "key": "password",
                  "value": "{{password}}",
                  "description": "password"
                },
                {
                  "disabled": false,
                  "key": "userName",
                  "value": "{{userName}}",
                  "description": "userName"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "method": "GET",
            "auth": null
          },
          "response": [
            {
              "id": "251ac144-03f0-4682-9b33-74e57c0e5eeb",
              "name": "OK",
              "originalRequest": {
                "url": {
                  "path": [
                    "jacoco",
                    "getTest5"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "body": "ea tempor",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "df86fa8f-32f6-442b-94f5-4e79b5e6542c",
              "name": "Unauthorized",
              "originalRequest": {
                "url": {
                  "path": [
                    "jacoco",
                    "getTest5"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "bb7cc34e-2246-493b-b5ac-ffcedcad6a86",
              "name": "Forbidden",
              "originalRequest": {
                "url": {
                  "path": [
                    "jacoco",
                    "getTest5"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Forbidden",
              "code": 403,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "8947a0c5-e2ce-480f-8de6-c8e18d48e781",
              "name": "Not Found",
              "originalRequest": {
                "url": {
                  "path": [
                    "jacoco",
                    "getTest5"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Not Found",
              "code": 404,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test code-diff using AI Type Open AI and AI Model deepseek-ai/DeepSeek-R1-Distill-Llama-70B\n\n\nTest generated for /jacoco/getTest5?password=<string>&userName=<string> for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"OK\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n          pm.response.to.have.header(\"Content-Type\");\n\nif (pm.response.code == 401){\n    pm.test(\"Unauthorized\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n      });\n\n    }\n\nif (pm.response.code == 403){\n    pm.test(\"Forbidden\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Forbidden\");\n      });\n\n    }\n\nif (pm.response.code == 404){\n    pm.test(\"Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n      });\n\n    }\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "d6d736e1-238d-49a5-9ecb-0d1ae077c909",
          "name": "computeFeature",
          "request": {
            "name": "computeFeature",
            "description": {},
            "url": {
              "path": [
                "jacoco",
                "test33"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": false,
                  "key": "address",
                  "value": "{{address}}"
                },
                {
                  "disabled": false,
                  "key": "num",
                  "value": "{{num}}"
                },
                {
                  "disabled": false,
                  "key": "password",
                  "value": "{{password}}"
                },
                {
                  "disabled": false,
                  "key": "username",
                  "value": "{{username}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "method": "POST",
            "auth": null
          },
          "response": [
            {
              "id": "71f1eed1-ca77-446a-a134-7c3ac1ed9d5c",
              "name": "OK",
              "originalRequest": {
                "url": {
                  "path": [
                    "jacoco",
                    "test33"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "address",
                      "value": "{{address}}"
                    },
                    {
                      "key": "num",
                      "value": "{{num}}"
                    },
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "username",
                      "value": "{{username}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "method": "POST",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "body": "ea tempor",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "1bc5a7c5-d242-4ef7-a6c7-0aa48c0d10ee",
              "name": "Created",
              "originalRequest": {
                "url": {
                  "path": [
                    "jacoco",
                    "test33"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "address",
                      "value": "{{address}}"
                    },
                    {
                      "key": "num",
                      "value": "{{num}}"
                    },
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "username",
                      "value": "{{username}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {}
              },
              "status": "Created",
              "code": 201,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "4cce1964-4fcd-4a0a-a8cc-47d99e9db2fa",
              "name": "Unauthorized",
              "originalRequest": {
                "url": {
                  "path": [
                    "jacoco",
                    "test33"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "address",
                      "value": "{{address}}"
                    },
                    {
                      "key": "num",
                      "value": "{{num}}"
                    },
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "username",
                      "value": "{{username}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {}
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "ad996cd0-2f44-4c8a-955b-5a45d748c47f",
              "name": "Forbidden",
              "originalRequest": {
                "url": {
                  "path": [
                    "jacoco",
                    "test33"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "address",
                      "value": "{{address}}"
                    },
                    {
                      "key": "num",
                      "value": "{{num}}"
                    },
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "username",
                      "value": "{{username}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {}
              },
              "status": "Forbidden",
              "code": 403,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "0a6666de-f14e-47ed-b38c-6b3a620e3242",
              "name": "Not Found",
              "originalRequest": {
                "url": {
                  "path": [
                    "jacoco",
                    "test33"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "address",
                      "value": "{{address}}"
                    },
                    {
                      "key": "num",
                      "value": "{{num}}"
                    },
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "username",
                      "value": "{{username}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {}
              },
              "status": "Not Found",
              "code": 404,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test code-diff using AI Type Open AI and AI Model deepseek-ai/DeepSeek-R1-Distill-Llama-70B\n\n\nTest generated for /jacoco/test33?address=<string>&num=<integer>&password=<string>&username=<string> for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"OK\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n          pm.response.to.have.header(\"Content-Type\");\n\nif (pm.response.code == 201){\n    pm.test(\"Created\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Created\");\n      });\n\n    }\n\nif (pm.response.code == 401){\n    pm.test(\"Unauthorized\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n      });\n\n    }\n\nif (pm.response.code == 403){\n    pm.test(\"Forbidden\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Forbidden\");\n      });\n\n    }\n\nif (pm.response.code == 404){\n    pm.test(\"Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n      });\n\n    }\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        }
      ],
      "event": []
    },
    {
      "id": "69df47fc-4f9b-4866-8385-34b145c86e64",
      "name": "jacoco2",
      "item": [
        {
          "id": "afccbea5-0e6f-49e9-8b94-e52dad70d6f4",
          "name": "addTest1",
          "request": {
            "name": "addTest1",
            "description": {},
            "url": {
              "path": [
                "jacoco2",
                "addTest1"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": false,
                  "key": "password",
                  "value": "{{password}}",
                  "description": "password"
                },
                {
                  "disabled": false,
                  "key": "userName",
                  "value": "{{userName}}",
                  "description": "userName"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "method": "GET",
            "auth": null
          },
          "response": [
            {
              "id": "b12738f0-a30a-42ec-bf02-2d23ee4287e9",
              "name": "OK",
              "originalRequest": {
                "url": {
                  "path": [
                    "jacoco2",
                    "addTest1"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "body": "ea tempor",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "819f1831-8a7a-44cd-a8c1-bb741ec88f55",
              "name": "Unauthorized",
              "originalRequest": {
                "url": {
                  "path": [
                    "jacoco2",
                    "addTest1"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "37722b15-9e05-4289-a8f7-d2b578d3d49b",
              "name": "Forbidden",
              "originalRequest": {
                "url": {
                  "path": [
                    "jacoco2",
                    "addTest1"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Forbidden",
              "code": 403,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "c7c6f59d-c62b-4cf1-970f-115cf0adee91",
              "name": "Not Found",
              "originalRequest": {
                "url": {
                  "path": [
                    "jacoco2",
                    "addTest1"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Not Found",
              "code": 404,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test code-diff using AI Type Open AI and AI Model deepseek-ai/DeepSeek-R1-Distill-Llama-70B\n\n\nTest generated for /jacoco2/addTest1?password=<string>&userName=<string> for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"OK\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n          pm.response.to.have.header(\"Content-Type\");\n\nif (pm.response.code == 401){\n    pm.test(\"Unauthorized\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n      });\n\n    }\n\nif (pm.response.code == 403){\n    pm.test(\"Forbidden\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Forbidden\");\n      });\n\n    }\n\nif (pm.response.code == 404){\n    pm.test(\"Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n      });\n\n    }\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "563c3894-d33d-402c-8281-d9ab875ed17e",
          "name": "addTest2",
          "request": {
            "name": "addTest2",
            "description": {},
            "url": {
              "path": [
                "jacoco2",
                "addTest2"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": false,
                  "key": "password",
                  "value": "{{password}}",
                  "description": "password"
                },
                {
                  "disabled": false,
                  "key": "userName",
                  "value": "{{userName}}",
                  "description": "userName"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "method": "GET",
            "auth": null
          },
          "response": [
            {
              "id": "450ff341-f178-474a-873e-a1f43d2bf0af",
              "name": "OK",
              "originalRequest": {
                "url": {
                  "path": [
                    "jacoco2",
                    "addTest2"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "body": "ea tempor",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "653bbdca-3510-4675-8d36-9bdceef38328",
              "name": "Unauthorized",
              "originalRequest": {
                "url": {
                  "path": [
                    "jacoco2",
                    "addTest2"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "f80048d0-d15a-4cbd-bdbb-c3dc4a2ed4dc",
              "name": "Forbidden",
              "originalRequest": {
                "url": {
                  "path": [
                    "jacoco2",
                    "addTest2"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Forbidden",
              "code": 403,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "bf60c7be-7bc0-4117-ab8c-d98f9bfc9dc1",
              "name": "Not Found",
              "originalRequest": {
                "url": {
                  "path": [
                    "jacoco2",
                    "addTest2"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Not Found",
              "code": 404,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test code-diff using AI Type Open AI and AI Model deepseek-ai/DeepSeek-R1-Distill-Llama-70B\n\n\nTest generated for /jacoco2/addTest2?password=<string>&userName=<string> for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"OK\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n          pm.response.to.have.header(\"Content-Type\");\n\nif (pm.response.code == 401){\n    pm.test(\"Unauthorized\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n      });\n\n    }\n\nif (pm.response.code == 403){\n    pm.test(\"Forbidden\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Forbidden\");\n      });\n\n    }\n\nif (pm.response.code == 404){\n    pm.test(\"Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n      });\n\n    }\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "5e81a5e2-8921-413c-a9bd-0f11720b0d8b",
          "name": "addTest3",
          "request": {
            "name": "addTest3",
            "description": {},
            "url": {
              "path": [
                "jacoco2",
                "addTest3"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": false,
                  "key": "password",
                  "value": "{{password}}",
                  "description": "password"
                },
                {
                  "disabled": false,
                  "key": "userName",
                  "value": "{{userName}}",
                  "description": "userName"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "method": "GET",
            "auth": null
          },
          "response": [
            {
              "id": "7f5b983c-edc6-4536-8d18-d6b6ad7ecfa3",
              "name": "OK",
              "originalRequest": {
                "url": {
                  "path": [
                    "jacoco2",
                    "addTest3"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "body": "ea tempor",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "aa92261d-7239-46ac-969d-108fcf258b9d",
              "name": "Unauthorized",
              "originalRequest": {
                "url": {
                  "path": [
                    "jacoco2",
                    "addTest3"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "7aadde12-0558-4d9c-bdf0-a4640a0ec980",
              "name": "Forbidden",
              "originalRequest": {
                "url": {
                  "path": [
                    "jacoco2",
                    "addTest3"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Forbidden",
              "code": 403,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "0313a8b3-ee08-455a-a6cf-65c6506de57e",
              "name": "Not Found",
              "originalRequest": {
                "url": {
                  "path": [
                    "jacoco2",
                    "addTest3"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Not Found",
              "code": 404,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test code-diff using AI Type Open AI and AI Model deepseek-ai/DeepSeek-R1-Distill-Llama-70B\n\n\nTest generated for /jacoco2/addTest3?password=<string>&userName=<string> for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"OK\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n          pm.response.to.have.header(\"Content-Type\");\n\nif (pm.response.code == 401){\n    pm.test(\"Unauthorized\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n      });\n\n    }\n\nif (pm.response.code == 403){\n    pm.test(\"Forbidden\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Forbidden\");\n      });\n\n    }\n\nif (pm.response.code == 404){\n    pm.test(\"Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n      });\n\n    }\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "95ea155d-4ceb-4b79-bc63-41c6fcfd84d7",
          "name": "addTest4",
          "request": {
            "name": "addTest4",
            "description": {},
            "url": {
              "path": [
                "jacoco2",
                "addTest4"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": false,
                  "key": "password",
                  "value": "{{password}}",
                  "description": "password"
                },
                {
                  "disabled": false,
                  "key": "userName",
                  "value": "{{userName}}",
                  "description": "userName"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "method": "GET",
            "auth": null
          },
          "response": [
            {
              "id": "fa365609-25b8-47f5-b01b-e9041a8c0adc",
              "name": "OK",
              "originalRequest": {
                "url": {
                  "path": [
                    "jacoco2",
                    "addTest4"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "body": "ea tempor",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "36adc09d-6cba-4fbe-b8dd-dcd3b9555e7a",
              "name": "Unauthorized",
              "originalRequest": {
                "url": {
                  "path": [
                    "jacoco2",
                    "addTest4"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "03c4c9ab-6e41-4ee0-a3bb-2c3d68c23c0d",
              "name": "Forbidden",
              "originalRequest": {
                "url": {
                  "path": [
                    "jacoco2",
                    "addTest4"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Forbidden",
              "code": 403,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "8cdeac7d-7588-4fad-9e1b-601f0d061750",
              "name": "Not Found",
              "originalRequest": {
                "url": {
                  "path": [
                    "jacoco2",
                    "addTest4"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Not Found",
              "code": 404,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test code-diff using AI Type Open AI and AI Model deepseek-ai/DeepSeek-R1-Distill-Llama-70B\n\n\nTest generated for /jacoco2/addTest4?password=<string>&userName=<string> for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"OK\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n          pm.response.to.have.header(\"Content-Type\");\n\nif (pm.response.code == 401){\n    pm.test(\"Unauthorized\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n      });\n\n    }\n\nif (pm.response.code == 403){\n    pm.test(\"Forbidden\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Forbidden\");\n      });\n\n    }\n\nif (pm.response.code == 404){\n    pm.test(\"Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n      });\n\n    }\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "ceddb062-8f0e-448c-a75a-1b85e015ee81",
          "name": "getTest1",
          "request": {
            "name": "getTest1",
            "description": {},
            "url": {
              "path": [
                "jacoco2",
                "getTest1"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": false,
                  "key": "password",
                  "value": "{{password}}",
                  "description": "password"
                },
                {
                  "disabled": false,
                  "key": "userName",
                  "value": "{{userName}}",
                  "description": "userName"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "method": "GET",
            "auth": null
          },
          "response": [
            {
              "id": "3d424f3d-e6c9-4e03-94f0-26b79110e3b0",
              "name": "OK",
              "originalRequest": {
                "url": {
                  "path": [
                    "jacoco2",
                    "getTest1"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "body": "ea tempor",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "d03d3645-2c2b-4b26-8a3a-22ab8e66c440",
              "name": "Unauthorized",
              "originalRequest": {
                "url": {
                  "path": [
                    "jacoco2",
                    "getTest1"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "0632f157-d285-4142-b381-a78b47abc0a9",
              "name": "Forbidden",
              "originalRequest": {
                "url": {
                  "path": [
                    "jacoco2",
                    "getTest1"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Forbidden",
              "code": 403,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "630ecd56-eb0d-4f1f-ae25-79b59b3a586a",
              "name": "Not Found",
              "originalRequest": {
                "url": {
                  "path": [
                    "jacoco2",
                    "getTest1"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Not Found",
              "code": 404,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test code-diff using AI Type Open AI and AI Model deepseek-ai/DeepSeek-R1-Distill-Llama-70B\n\n\nTest generated for /jacoco2/getTest1?password=<string>&userName=<string> for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"OK\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n          pm.response.to.have.header(\"Content-Type\");\n\nif (pm.response.code == 401){\n    pm.test(\"Unauthorized\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n      });\n\n    }\n\nif (pm.response.code == 403){\n    pm.test(\"Forbidden\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Forbidden\");\n      });\n\n    }\n\nif (pm.response.code == 404){\n    pm.test(\"Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n      });\n\n    }\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "32a34b32-acbf-46f6-9cd5-770a956ba34a",
          "name": "getTest2",
          "request": {
            "name": "getTest2",
            "description": {},
            "url": {
              "path": [
                "jacoco2",
                "getTest2"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": false,
                  "key": "password",
                  "value": "{{password}}",
                  "description": "password"
                },
                {
                  "disabled": false,
                  "key": "userName",
                  "value": "{{userName}}",
                  "description": "userName"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "method": "GET",
            "auth": null
          },
          "response": [
            {
              "id": "4ff884e9-6a50-48ee-b06c-670d2daa4248",
              "name": "OK",
              "originalRequest": {
                "url": {
                  "path": [
                    "jacoco2",
                    "getTest2"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "body": "ea tempor",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "82fb2850-582d-4872-8b66-6ff12d399039",
              "name": "Unauthorized",
              "originalRequest": {
                "url": {
                  "path": [
                    "jacoco2",
                    "getTest2"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "423bab19-b7dc-41f8-86dc-10f5e69fd752",
              "name": "Forbidden",
              "originalRequest": {
                "url": {
                  "path": [
                    "jacoco2",
                    "getTest2"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Forbidden",
              "code": 403,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "4dfeb197-a789-46b3-8d79-faf948507577",
              "name": "Not Found",
              "originalRequest": {
                "url": {
                  "path": [
                    "jacoco2",
                    "getTest2"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Not Found",
              "code": 404,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test code-diff using AI Type Open AI and AI Model deepseek-ai/DeepSeek-R1-Distill-Llama-70B\n\n\nTest generated for /jacoco2/getTest2?password=<string>&userName=<string> for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"OK\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n          pm.response.to.have.header(\"Content-Type\");\n\nif (pm.response.code == 401){\n    pm.test(\"Unauthorized\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n      });\n\n    }\n\nif (pm.response.code == 403){\n    pm.test(\"Forbidden\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Forbidden\");\n      });\n\n    }\n\nif (pm.response.code == 404){\n    pm.test(\"Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n      });\n\n    }\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "72697c60-3065-47a7-b289-f720840e9c28",
          "name": "getTest3",
          "request": {
            "name": "getTest3",
            "description": {},
            "url": {
              "path": [
                "jacoco2",
                "getTest3"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": false,
                  "key": "password",
                  "value": "{{password}}",
                  "description": "password"
                },
                {
                  "disabled": false,
                  "key": "userName",
                  "value": "{{userName}}",
                  "description": "userName"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "method": "GET",
            "auth": null
          },
          "response": [
            {
              "id": "55b2420c-a305-4e25-ba06-157f45520005",
              "name": "OK",
              "originalRequest": {
                "url": {
                  "path": [
                    "jacoco2",
                    "getTest3"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "body": "ea tempor",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "b2c1ffb2-a0e6-4bbd-8769-7cf37674d3e5",
              "name": "Unauthorized",
              "originalRequest": {
                "url": {
                  "path": [
                    "jacoco2",
                    "getTest3"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "eddb27c1-8e3c-4a97-b4f4-de9f13dac9d6",
              "name": "Forbidden",
              "originalRequest": {
                "url": {
                  "path": [
                    "jacoco2",
                    "getTest3"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Forbidden",
              "code": 403,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "e2e8411d-886f-49df-9682-871349eea427",
              "name": "Not Found",
              "originalRequest": {
                "url": {
                  "path": [
                    "jacoco2",
                    "getTest3"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Not Found",
              "code": 404,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test code-diff using AI Type Open AI and AI Model deepseek-ai/DeepSeek-R1-Distill-Llama-70B\n\n\nTest generated for /jacoco2/getTest3?password=<string>&userName=<string> for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"OK\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n          pm.response.to.have.header(\"Content-Type\");\n\nif (pm.response.code == 401){\n    pm.test(\"Unauthorized\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n      });\n\n    }\n\nif (pm.response.code == 403){\n    pm.test(\"Forbidden\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Forbidden\");\n      });\n\n    }\n\nif (pm.response.code == 404){\n    pm.test(\"Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n      });\n\n    }\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "243436a5-eeaa-4cac-97bd-adfaddca7b55",
          "name": "newTest1",
          "request": {
            "name": "newTest1",
            "description": {},
            "url": {
              "path": [
                "jacoco2",
                "newTest1"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": false,
                  "key": "password",
                  "value": "{{password}}",
                  "description": "password"
                },
                {
                  "disabled": false,
                  "key": "userName",
                  "value": "{{userName}}",
                  "description": "userName"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "method": "GET",
            "auth": null
          },
          "response": [
            {
              "id": "e9a4cab4-0778-4edc-8af7-7133ce11bd62",
              "name": "OK",
              "originalRequest": {
                "url": {
                  "path": [
                    "jacoco2",
                    "newTest1"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "body": "ea tempor",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "1bb465ca-9a30-4405-81d9-5411af2f7aaa",
              "name": "Unauthorized",
              "originalRequest": {
                "url": {
                  "path": [
                    "jacoco2",
                    "newTest1"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "924656dd-6f59-468a-b269-6b2b33dc39da",
              "name": "Forbidden",
              "originalRequest": {
                "url": {
                  "path": [
                    "jacoco2",
                    "newTest1"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Forbidden",
              "code": 403,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "057c491a-71a5-4df7-990e-27df00393bb0",
              "name": "Not Found",
              "originalRequest": {
                "url": {
                  "path": [
                    "jacoco2",
                    "newTest1"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Not Found",
              "code": 404,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test code-diff using AI Type Open AI and AI Model deepseek-ai/DeepSeek-R1-Distill-Llama-70B\n\n\nTest generated for /jacoco2/newTest1?password=<string>&userName=<string> for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"OK\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n          pm.response.to.have.header(\"Content-Type\");\n\nif (pm.response.code == 401){\n    pm.test(\"Unauthorized\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n      });\n\n    }\n\nif (pm.response.code == 403){\n    pm.test(\"Forbidden\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Forbidden\");\n      });\n\n    }\n\nif (pm.response.code == 404){\n    pm.test(\"Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n      });\n\n    }\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "4ce42f03-1624-4e4f-b218-ab0ce53926fb",
          "name": "newTest2",
          "request": {
            "name": "newTest2",
            "description": {},
            "url": {
              "path": [
                "jacoco2",
                "newTest2"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": false,
                  "key": "password",
                  "value": "{{password}}",
                  "description": "password"
                },
                {
                  "disabled": false,
                  "key": "userName",
                  "value": "{{userName}}",
                  "description": "userName"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "method": "GET",
            "auth": null
          },
          "response": [
            {
              "id": "9eacaf5a-1f7c-45fb-b5ce-4e71c7a15825",
              "name": "OK",
              "originalRequest": {
                "url": {
                  "path": [
                    "jacoco2",
                    "newTest2"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "body": "ea tempor",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "0fbbf6f5-a9ab-43ca-9867-1d5ec1d1e78e",
              "name": "Unauthorized",
              "originalRequest": {
                "url": {
                  "path": [
                    "jacoco2",
                    "newTest2"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "4faf1c0f-79fd-4ed3-8fd2-a34ae9537eea",
              "name": "Forbidden",
              "originalRequest": {
                "url": {
                  "path": [
                    "jacoco2",
                    "newTest2"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Forbidden",
              "code": 403,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "85269319-faf8-4048-805b-7f860b96c82c",
              "name": "Not Found",
              "originalRequest": {
                "url": {
                  "path": [
                    "jacoco2",
                    "newTest2"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Not Found",
              "code": 404,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test code-diff using AI Type Open AI and AI Model deepseek-ai/DeepSeek-R1-Distill-Llama-70B\n\n\nTest generated for /jacoco2/newTest2?password=<string>&userName=<string> for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"OK\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n          pm.response.to.have.header(\"Content-Type\");\n\nif (pm.response.code == 401){\n    pm.test(\"Unauthorized\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n      });\n\n    }\n\nif (pm.response.code == 403){\n    pm.test(\"Forbidden\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Forbidden\");\n      });\n\n    }\n\nif (pm.response.code == 404){\n    pm.test(\"Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n      });\n\n    }\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        }
      ],
      "event": []
    },
    {
      "id": "ee445d81-d38f-4ee2-9eac-8d271c87d133",
      "name": "jacoco3",
      "item": [
        {
          "id": "7603c9c1-2bdf-40b4-bcac-858c69419378",
          "name": "addTest1",
          "request": {
            "name": "addTest1",
            "description": {},
            "url": {
              "path": [
                "jacoco3",
                "addTest1"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": false,
                  "key": "password",
                  "value": "{{password}}",
                  "description": "password"
                },
                {
                  "disabled": false,
                  "key": "userName",
                  "value": "{{userName}}",
                  "description": "userName"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "method": "GET",
            "auth": null
          },
          "response": [
            {
              "id": "c459617d-5f19-40ce-9946-27f8d42dde53",
              "name": "OK",
              "originalRequest": {
                "url": {
                  "path": [
                    "jacoco3",
                    "addTest1"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "body": "ea tempor",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "d730e9dc-1328-4a4a-bac4-068d8c6f63c4",
              "name": "Unauthorized",
              "originalRequest": {
                "url": {
                  "path": [
                    "jacoco3",
                    "addTest1"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "5c2746ae-81c9-4234-87ed-a77112a25dca",
              "name": "Forbidden",
              "originalRequest": {
                "url": {
                  "path": [
                    "jacoco3",
                    "addTest1"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Forbidden",
              "code": 403,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "636913f4-f9f0-4728-9aa3-f63e4343353c",
              "name": "Not Found",
              "originalRequest": {
                "url": {
                  "path": [
                    "jacoco3",
                    "addTest1"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Not Found",
              "code": 404,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test code-diff using AI Type Open AI and AI Model deepseek-ai/DeepSeek-R1-Distill-Llama-70B\n\n\nTest generated for /jacoco3/addTest1?password=<string>&userName=<string> for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"OK\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n          pm.response.to.have.header(\"Content-Type\");\n\nif (pm.response.code == 401){\n    pm.test(\"Unauthorized\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n      });\n\n    }\n\nif (pm.response.code == 403){\n    pm.test(\"Forbidden\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Forbidden\");\n      });\n\n    }\n\nif (pm.response.code == 404){\n    pm.test(\"Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n      });\n\n    }\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "20039bb2-e40b-4b47-8a15-ca64799038e2",
          "name": "addTest2",
          "request": {
            "name": "addTest2",
            "description": {},
            "url": {
              "path": [
                "jacoco3",
                "addTest2"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": false,
                  "key": "password",
                  "value": "{{password}}",
                  "description": "password"
                },
                {
                  "disabled": false,
                  "key": "userName",
                  "value": "{{userName}}",
                  "description": "userName"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "method": "GET",
            "auth": null
          },
          "response": [
            {
              "id": "b05bb8dd-a9ca-4343-92b2-462b2394a782",
              "name": "OK",
              "originalRequest": {
                "url": {
                  "path": [
                    "jacoco3",
                    "addTest2"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "body": "ea tempor",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "997a1ad8-fe2b-4c1f-ad43-959d140dcfd1",
              "name": "Unauthorized",
              "originalRequest": {
                "url": {
                  "path": [
                    "jacoco3",
                    "addTest2"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "242778fc-bf04-4f43-aad7-724d1dc52534",
              "name": "Forbidden",
              "originalRequest": {
                "url": {
                  "path": [
                    "jacoco3",
                    "addTest2"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Forbidden",
              "code": 403,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "e5c4af11-9e3a-47ca-8e85-2393b2199fc2",
              "name": "Not Found",
              "originalRequest": {
                "url": {
                  "path": [
                    "jacoco3",
                    "addTest2"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Not Found",
              "code": 404,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test code-diff using AI Type Open AI and AI Model deepseek-ai/DeepSeek-R1-Distill-Llama-70B\n\n\nTest generated for /jacoco3/addTest2?password=<string>&userName=<string> for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"OK\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n          pm.response.to.have.header(\"Content-Type\");\n\nif (pm.response.code == 401){\n    pm.test(\"Unauthorized\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n      });\n\n    }\n\nif (pm.response.code == 403){\n    pm.test(\"Forbidden\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Forbidden\");\n      });\n\n    }\n\nif (pm.response.code == 404){\n    pm.test(\"Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n      });\n\n    }\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "f11d5663-c3c8-4dd4-a181-dea530bf3ff0",
          "name": "addTest3",
          "request": {
            "name": "addTest3",
            "description": {},
            "url": {
              "path": [
                "jacoco3",
                "addTest3"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": false,
                  "key": "password",
                  "value": "{{password}}",
                  "description": "password"
                },
                {
                  "disabled": false,
                  "key": "userName",
                  "value": "{{userName}}",
                  "description": "userName"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "method": "GET",
            "auth": null
          },
          "response": [
            {
              "id": "e1c34ae5-df26-43a5-89c0-30c22c81d699",
              "name": "OK",
              "originalRequest": {
                "url": {
                  "path": [
                    "jacoco3",
                    "addTest3"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "body": "ea tempor",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "8fc07bfa-a573-4001-98ed-e15a41b7438e",
              "name": "Unauthorized",
              "originalRequest": {
                "url": {
                  "path": [
                    "jacoco3",
                    "addTest3"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "b72448f1-cd6f-4867-a6a8-0e01ffc29fb1",
              "name": "Forbidden",
              "originalRequest": {
                "url": {
                  "path": [
                    "jacoco3",
                    "addTest3"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Forbidden",
              "code": 403,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "d778e29d-688d-4743-ae93-b821c8d8c3bb",
              "name": "Not Found",
              "originalRequest": {
                "url": {
                  "path": [
                    "jacoco3",
                    "addTest3"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Not Found",
              "code": 404,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test code-diff using AI Type Open AI and AI Model deepseek-ai/DeepSeek-R1-Distill-Llama-70B\n\n\nTest generated for /jacoco3/addTest3?password=<string>&userName=<string> for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"OK\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n          pm.response.to.have.header(\"Content-Type\");\n\nif (pm.response.code == 401){\n    pm.test(\"Unauthorized\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n      });\n\n    }\n\nif (pm.response.code == 403){\n    pm.test(\"Forbidden\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Forbidden\");\n      });\n\n    }\n\nif (pm.response.code == 404){\n    pm.test(\"Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n      });\n\n    }\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "55dec35d-0a6e-4183-b7de-bb73bc8202be",
          "name": "addTest4",
          "request": {
            "name": "addTest4",
            "description": {},
            "url": {
              "path": [
                "jacoco3",
                "addTest4"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": false,
                  "key": "password",
                  "value": "{{password}}",
                  "description": "password"
                },
                {
                  "disabled": false,
                  "key": "userName",
                  "value": "{{userName}}",
                  "description": "userName"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "method": "GET",
            "auth": null
          },
          "response": [
            {
              "id": "2bfaa612-afe6-4ce8-9c1c-ba55a3800b2c",
              "name": "OK",
              "originalRequest": {
                "url": {
                  "path": [
                    "jacoco3",
                    "addTest4"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "body": "ea tempor",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "cfafda19-c773-4361-88f1-a8094eea974d",
              "name": "Unauthorized",
              "originalRequest": {
                "url": {
                  "path": [
                    "jacoco3",
                    "addTest4"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "659eedfa-aeb1-4ca1-9aa7-a4df42cdf168",
              "name": "Forbidden",
              "originalRequest": {
                "url": {
                  "path": [
                    "jacoco3",
                    "addTest4"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Forbidden",
              "code": 403,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "061e43f9-15df-419b-9d7f-6589ec98459d",
              "name": "Not Found",
              "originalRequest": {
                "url": {
                  "path": [
                    "jacoco3",
                    "addTest4"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Not Found",
              "code": 404,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test code-diff using AI Type Open AI and AI Model deepseek-ai/DeepSeek-R1-Distill-Llama-70B\n\n\nTest generated for /jacoco3/addTest4?password=<string>&userName=<string> for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"OK\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n          pm.response.to.have.header(\"Content-Type\");\n\nif (pm.response.code == 401){\n    pm.test(\"Unauthorized\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n      });\n\n    }\n\nif (pm.response.code == 403){\n    pm.test(\"Forbidden\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Forbidden\");\n      });\n\n    }\n\nif (pm.response.code == 404){\n    pm.test(\"Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n      });\n\n    }\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "75073b16-b5f0-46c1-8c13-49b5de8a3cfb",
          "name": "getTest1",
          "request": {
            "name": "getTest1",
            "description": {},
            "url": {
              "path": [
                "jacoco3",
                "getTest1"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": false,
                  "key": "password",
                  "value": "{{password}}",
                  "description": "password"
                },
                {
                  "disabled": false,
                  "key": "userName",
                  "value": "{{userName}}",
                  "description": "userName"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "method": "GET",
            "auth": null
          },
          "response": [
            {
              "id": "ae166fd0-20c4-47f7-a5b6-4bf8785e0d5f",
              "name": "OK",
              "originalRequest": {
                "url": {
                  "path": [
                    "jacoco3",
                    "getTest1"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "body": "ea tempor",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "35b86c0d-435c-4e7e-b201-1985bc94b6fb",
              "name": "Unauthorized",
              "originalRequest": {
                "url": {
                  "path": [
                    "jacoco3",
                    "getTest1"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "5350557e-d451-4087-a074-e9c163a44302",
              "name": "Forbidden",
              "originalRequest": {
                "url": {
                  "path": [
                    "jacoco3",
                    "getTest1"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Forbidden",
              "code": 403,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "c7e2c3fc-9db5-4455-8819-4e047791679c",
              "name": "Not Found",
              "originalRequest": {
                "url": {
                  "path": [
                    "jacoco3",
                    "getTest1"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Not Found",
              "code": 404,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test code-diff using AI Type Open AI and AI Model deepseek-ai/DeepSeek-R1-Distill-Llama-70B\n\n\nTest generated for /jacoco3/getTest1?password=<string>&userName=<string> for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"OK\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n          pm.response.to.have.header(\"Content-Type\");\n\nif (pm.response.code == 401){\n    pm.test(\"Unauthorized\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n      });\n\n    }\n\nif (pm.response.code == 403){\n    pm.test(\"Forbidden\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Forbidden\");\n      });\n\n    }\n\nif (pm.response.code == 404){\n    pm.test(\"Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n      });\n\n    }\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "c7ac53a8-a017-49ff-b789-6ae3429f69fc",
          "name": "getTest2",
          "request": {
            "name": "getTest2",
            "description": {},
            "url": {
              "path": [
                "jacoco3",
                "getTest2"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": false,
                  "key": "password",
                  "value": "{{password}}",
                  "description": "password"
                },
                {
                  "disabled": false,
                  "key": "userName",
                  "value": "{{userName}}",
                  "description": "userName"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "method": "GET",
            "auth": null
          },
          "response": [
            {
              "id": "49dd8b99-0070-467e-bd70-a2789e52da18",
              "name": "OK",
              "originalRequest": {
                "url": {
                  "path": [
                    "jacoco3",
                    "getTest2"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "body": "ea tempor",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "cc229ed0-ab42-4f09-852d-7b02ee3dfed4",
              "name": "Unauthorized",
              "originalRequest": {
                "url": {
                  "path": [
                    "jacoco3",
                    "getTest2"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "5e900ea3-0a4b-4318-b2a1-32c38d6b86d7",
              "name": "Forbidden",
              "originalRequest": {
                "url": {
                  "path": [
                    "jacoco3",
                    "getTest2"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Forbidden",
              "code": 403,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "33448635-dbc8-4bda-9e8d-90f5543442e3",
              "name": "Not Found",
              "originalRequest": {
                "url": {
                  "path": [
                    "jacoco3",
                    "getTest2"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Not Found",
              "code": 404,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test code-diff using AI Type Open AI and AI Model deepseek-ai/DeepSeek-R1-Distill-Llama-70B\n\n\nTest generated for /jacoco3/getTest2?password=<string>&userName=<string> for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"OK\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n          pm.response.to.have.header(\"Content-Type\");\n\nif (pm.response.code == 401){\n    pm.test(\"Unauthorized\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n      });\n\n    }\n\nif (pm.response.code == 403){\n    pm.test(\"Forbidden\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Forbidden\");\n      });\n\n    }\n\nif (pm.response.code == 404){\n    pm.test(\"Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n      });\n\n    }\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "7c870551-a8e9-4053-a16d-2d30b635cd5c",
          "name": "getTest3",
          "request": {
            "name": "getTest3",
            "description": {},
            "url": {
              "path": [
                "jacoco3",
                "getTest3"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": false,
                  "key": "password",
                  "value": "{{password}}",
                  "description": "password"
                },
                {
                  "disabled": false,
                  "key": "userName",
                  "value": "{{userName}}",
                  "description": "userName"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "method": "GET",
            "auth": null
          },
          "response": [
            {
              "id": "bc46d9b6-a9c7-44f0-abb7-20940d078bf4",
              "name": "OK",
              "originalRequest": {
                "url": {
                  "path": [
                    "jacoco3",
                    "getTest3"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "body": "ea tempor",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "ae1ee17a-0705-40f9-9d37-4bedbb1bce60",
              "name": "Unauthorized",
              "originalRequest": {
                "url": {
                  "path": [
                    "jacoco3",
                    "getTest3"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "a7555f69-9094-42ff-842c-dbc35d80ea7d",
              "name": "Forbidden",
              "originalRequest": {
                "url": {
                  "path": [
                    "jacoco3",
                    "getTest3"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Forbidden",
              "code": 403,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "5f7ee33f-5ae0-4ec1-a093-f44dea72aae0",
              "name": "Not Found",
              "originalRequest": {
                "url": {
                  "path": [
                    "jacoco3",
                    "getTest3"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Not Found",
              "code": 404,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test code-diff using AI Type Open AI and AI Model deepseek-ai/DeepSeek-R1-Distill-Llama-70B\n\n\nTest generated for /jacoco3/getTest3?password=<string>&userName=<string> for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"OK\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n          pm.response.to.have.header(\"Content-Type\");\n\nif (pm.response.code == 401){\n    pm.test(\"Unauthorized\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n      });\n\n    }\n\nif (pm.response.code == 403){\n    pm.test(\"Forbidden\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Forbidden\");\n      });\n\n    }\n\nif (pm.response.code == 404){\n    pm.test(\"Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n      });\n\n    }\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "12a6a56d-f8c3-424b-9187-5f491ac27e2d",
          "name": "getTest4",
          "request": {
            "name": "getTest4",
            "description": {},
            "url": {
              "path": [
                "jacoco3",
                "getTest4"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": false,
                  "key": "password",
                  "value": "{{password}}",
                  "description": "password"
                },
                {
                  "disabled": false,
                  "key": "userName",
                  "value": "{{userName}}",
                  "description": "userName"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "method": "GET",
            "auth": null
          },
          "response": [
            {
              "id": "944fa9ff-d924-4c66-9fe3-78a6f4059f5d",
              "name": "OK",
              "originalRequest": {
                "url": {
                  "path": [
                    "jacoco3",
                    "getTest4"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "body": "ea tempor",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "f43d93dc-6ce9-4c7a-97e8-3f68701309bd",
              "name": "Unauthorized",
              "originalRequest": {
                "url": {
                  "path": [
                    "jacoco3",
                    "getTest4"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "4d404b18-32d1-4a5f-82c4-d49ca38444a5",
              "name": "Forbidden",
              "originalRequest": {
                "url": {
                  "path": [
                    "jacoco3",
                    "getTest4"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Forbidden",
              "code": 403,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "0117b825-db9a-4ac7-aa49-d574b63f32e7",
              "name": "Not Found",
              "originalRequest": {
                "url": {
                  "path": [
                    "jacoco3",
                    "getTest4"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Not Found",
              "code": 404,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test code-diff using AI Type Open AI and AI Model deepseek-ai/DeepSeek-R1-Distill-Llama-70B\n\n\nTest generated for /jacoco3/getTest4?password=<string>&userName=<string> for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"OK\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n          pm.response.to.have.header(\"Content-Type\");\n\nif (pm.response.code == 401){\n    pm.test(\"Unauthorized\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n      });\n\n    }\n\nif (pm.response.code == 403){\n    pm.test(\"Forbidden\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Forbidden\");\n      });\n\n    }\n\nif (pm.response.code == 404){\n    pm.test(\"Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n      });\n\n    }\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "fba3b4d4-7f87-434f-bebf-5077ca8a4fd4",
          "name": "newTest1",
          "request": {
            "name": "newTest1",
            "description": {},
            "url": {
              "path": [
                "jacoco3",
                "newTest1"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": false,
                  "key": "password",
                  "value": "{{password}}",
                  "description": "password"
                },
                {
                  "disabled": false,
                  "key": "userName",
                  "value": "{{userName}}",
                  "description": "userName"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "method": "GET",
            "auth": null
          },
          "response": [
            {
              "id": "90298867-29d2-4795-af40-57e760b0fa10",
              "name": "OK",
              "originalRequest": {
                "url": {
                  "path": [
                    "jacoco3",
                    "newTest1"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "body": "ea tempor",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "576a1170-9b46-406f-8ed3-741b68bcc76d",
              "name": "Unauthorized",
              "originalRequest": {
                "url": {
                  "path": [
                    "jacoco3",
                    "newTest1"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "dde60897-995e-4588-a59d-8bafa0ea98f7",
              "name": "Forbidden",
              "originalRequest": {
                "url": {
                  "path": [
                    "jacoco3",
                    "newTest1"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Forbidden",
              "code": 403,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "02efcff0-d182-4cf1-afa9-6a26a72a597f",
              "name": "Not Found",
              "originalRequest": {
                "url": {
                  "path": [
                    "jacoco3",
                    "newTest1"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Not Found",
              "code": 404,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test code-diff using AI Type Open AI and AI Model deepseek-ai/DeepSeek-R1-Distill-Llama-70B\n\n\nTest generated for /jacoco3/newTest1?password=<string>&userName=<string> for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"OK\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n          pm.response.to.have.header(\"Content-Type\");\n\nif (pm.response.code == 401){\n    pm.test(\"Unauthorized\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n      });\n\n    }\n\nif (pm.response.code == 403){\n    pm.test(\"Forbidden\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Forbidden\");\n      });\n\n    }\n\nif (pm.response.code == 404){\n    pm.test(\"Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n      });\n\n    }\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "3966f142-7738-4ede-b8a5-9e2941adc4ec",
          "name": "newTest111",
          "request": {
            "name": "newTest111",
            "description": {},
            "url": {
              "path": [
                "jacoco3",
                "newTest111"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": false,
                  "key": "password",
                  "value": "{{password}}",
                  "description": "password"
                },
                {
                  "disabled": false,
                  "key": "userName",
                  "value": "{{userName}}",
                  "description": "userName"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "method": "GET",
            "auth": null
          },
          "response": [
            {
              "id": "1fbbfcb4-f254-49a4-afdd-8d993b3434f3",
              "name": "OK",
              "originalRequest": {
                "url": {
                  "path": [
                    "jacoco3",
                    "newTest111"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "body": "ea tempor",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "3ce570d2-facc-4ef3-8477-bf6e16e14a45",
              "name": "Unauthorized",
              "originalRequest": {
                "url": {
                  "path": [
                    "jacoco3",
                    "newTest111"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "5fa7035c-77bb-4d80-8dce-7f62f6174d1a",
              "name": "Forbidden",
              "originalRequest": {
                "url": {
                  "path": [
                    "jacoco3",
                    "newTest111"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Forbidden",
              "code": 403,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "b6831884-7ffb-42c8-a434-d21f3968b814",
              "name": "Not Found",
              "originalRequest": {
                "url": {
                  "path": [
                    "jacoco3",
                    "newTest111"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Not Found",
              "code": 404,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test code-diff using AI Type Open AI and AI Model deepseek-ai/DeepSeek-R1-Distill-Llama-70B\n\n\nTest generated for /jacoco3/newTest111?password=<string>&userName=<string> for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"OK\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n          pm.response.to.have.header(\"Content-Type\");\n\nif (pm.response.code == 401){\n    pm.test(\"Unauthorized\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n      });\n\n    }\n\nif (pm.response.code == 403){\n    pm.test(\"Forbidden\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Forbidden\");\n      });\n\n    }\n\nif (pm.response.code == 404){\n    pm.test(\"Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n      });\n\n    }\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "43776825-e3bf-4f95-8de6-25cf27ce26aa",
          "name": "newTest2",
          "request": {
            "name": "newTest2",
            "description": {},
            "url": {
              "path": [
                "jacoco3",
                "newTest2"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": false,
                  "key": "password",
                  "value": "{{password}}",
                  "description": "password"
                },
                {
                  "disabled": false,
                  "key": "userName",
                  "value": "{{userName}}",
                  "description": "userName"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "method": "GET",
            "auth": null
          },
          "response": [
            {
              "id": "6ec4224c-17a0-4de1-8c49-a759b0047b5c",
              "name": "OK",
              "originalRequest": {
                "url": {
                  "path": [
                    "jacoco3",
                    "newTest2"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "body": "ea tempor",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "468e6f6d-fda9-412f-b27a-ff73882a4724",
              "name": "Unauthorized",
              "originalRequest": {
                "url": {
                  "path": [
                    "jacoco3",
                    "newTest2"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "ff21fc8e-751a-4749-8c6a-38729337a2e3",
              "name": "Forbidden",
              "originalRequest": {
                "url": {
                  "path": [
                    "jacoco3",
                    "newTest2"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Forbidden",
              "code": 403,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "94dcbeaa-53f4-4c45-8d45-5bb8afb3c5c4",
              "name": "Not Found",
              "originalRequest": {
                "url": {
                  "path": [
                    "jacoco3",
                    "newTest2"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Not Found",
              "code": 404,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test code-diff using AI Type Open AI and AI Model deepseek-ai/DeepSeek-R1-Distill-Llama-70B\n\n\nTest generated for /jacoco3/newTest2?password=<string>&userName=<string> for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"OK\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n          pm.response.to.have.header(\"Content-Type\");\n\nif (pm.response.code == 401){\n    pm.test(\"Unauthorized\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n      });\n\n    }\n\nif (pm.response.code == 403){\n    pm.test(\"Forbidden\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Forbidden\");\n      });\n\n    }\n\nif (pm.response.code == 404){\n    pm.test(\"Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n      });\n\n    }\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        }
      ],
      "event": []
    },
    {
      "id": "15e64aea-37c9-4454-a82a-91769adb7d4f",
      "name": "jihuawai",
      "item": [
        {
          "id": "f5ffc83e-7898-4433-8c66-7f94509de0b4",
          "name": "addTest1",
          "request": {
            "name": "addTest1",
            "description": {},
            "url": {
              "path": [
                "jihuawai",
                "jihuawai1"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": false,
                  "key": "password",
                  "value": "{{password}}",
                  "description": "password"
                },
                {
                  "disabled": false,
                  "key": "userName",
                  "value": "{{userName}}",
                  "description": "userName"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "method": "GET",
            "auth": null
          },
          "response": [
            {
              "id": "fbe0c281-3514-4659-be6a-094d0bcbc516",
              "name": "OK",
              "originalRequest": {
                "url": {
                  "path": [
                    "jihuawai",
                    "jihuawai1"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "body": "ea tempor",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "1f5a63af-4125-4cd8-b01c-b00b16e19772",
              "name": "Unauthorized",
              "originalRequest": {
                "url": {
                  "path": [
                    "jihuawai",
                    "jihuawai1"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "4be406d6-e5ee-432d-a0fc-a59d8b7f9ac3",
              "name": "Forbidden",
              "originalRequest": {
                "url": {
                  "path": [
                    "jihuawai",
                    "jihuawai1"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Forbidden",
              "code": 403,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "b6ba43f4-f5f8-4f68-98e9-67b050b0d28c",
              "name": "Not Found",
              "originalRequest": {
                "url": {
                  "path": [
                    "jihuawai",
                    "jihuawai1"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Not Found",
              "code": 404,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test code-diff using AI Type Open AI and AI Model deepseek-ai/DeepSeek-R1-Distill-Llama-70B\n\n\nTest generated for /jihuawai/jihuawai1?password=<string>&userName=<string> for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"OK\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n          pm.response.to.have.header(\"Content-Type\");\n\nif (pm.response.code == 401){\n    pm.test(\"Unauthorized\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n      });\n\n    }\n\nif (pm.response.code == 403){\n    pm.test(\"Forbidden\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Forbidden\");\n      });\n\n    }\n\nif (pm.response.code == 404){\n    pm.test(\"Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n      });\n\n    }\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "4489f62f-8a36-471f-b946-1d9c4e199fdd",
          "name": "addTest2",
          "request": {
            "name": "addTest2",
            "description": {},
            "url": {
              "path": [
                "jihuawai",
                "jihuawai2"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": false,
                  "key": "password",
                  "value": "{{password}}",
                  "description": "password"
                },
                {
                  "disabled": false,
                  "key": "userName",
                  "value": "{{userName}}",
                  "description": "userName"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "method": "GET",
            "auth": null
          },
          "response": [
            {
              "id": "7272440e-0dfa-4e43-add3-c7fad408d12b",
              "name": "OK",
              "originalRequest": {
                "url": {
                  "path": [
                    "jihuawai",
                    "jihuawai2"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "body": "ea tempor",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "8651a4a1-1552-4780-9bae-ae06e2367ac0",
              "name": "Unauthorized",
              "originalRequest": {
                "url": {
                  "path": [
                    "jihuawai",
                    "jihuawai2"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "0e435e9f-f2c0-4ef8-a9ce-a1bf41f1d9e7",
              "name": "Forbidden",
              "originalRequest": {
                "url": {
                  "path": [
                    "jihuawai",
                    "jihuawai2"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Forbidden",
              "code": 403,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "eda91ecd-0baf-469f-bd90-b7b70c823d50",
              "name": "Not Found",
              "originalRequest": {
                "url": {
                  "path": [
                    "jihuawai",
                    "jihuawai2"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Not Found",
              "code": 404,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test code-diff using AI Type Open AI and AI Model deepseek-ai/DeepSeek-R1-Distill-Llama-70B\n\n\nTest generated for /jihuawai/jihuawai2?password=<string>&userName=<string> for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"OK\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n          pm.response.to.have.header(\"Content-Type\");\n\nif (pm.response.code == 401){\n    pm.test(\"Unauthorized\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n      });\n\n    }\n\nif (pm.response.code == 403){\n    pm.test(\"Forbidden\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Forbidden\");\n      });\n\n    }\n\nif (pm.response.code == 404){\n    pm.test(\"Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n      });\n\n    }\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "e1b89f29-80b9-4a0b-ba6a-9ca1f25ca586",
          "name": "getTest1",
          "request": {
            "name": "getTest1",
            "description": {},
            "url": {
              "path": [
                "jihuawai",
                "jihuawai3"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": false,
                  "key": "password",
                  "value": "{{password}}",
                  "description": "password"
                },
                {
                  "disabled": false,
                  "key": "userName",
                  "value": "{{userName}}",
                  "description": "userName"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "method": "GET",
            "auth": null
          },
          "response": [
            {
              "id": "8e3b6a1e-2a93-4220-81b0-203e35aa69fa",
              "name": "OK",
              "originalRequest": {
                "url": {
                  "path": [
                    "jihuawai",
                    "jihuawai3"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "body": "ea tempor",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "d00466d8-59ae-4fd4-aa06-fcba8f5fab03",
              "name": "Unauthorized",
              "originalRequest": {
                "url": {
                  "path": [
                    "jihuawai",
                    "jihuawai3"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "5ed8bedf-13da-4841-9766-27170a7c3991",
              "name": "Forbidden",
              "originalRequest": {
                "url": {
                  "path": [
                    "jihuawai",
                    "jihuawai3"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Forbidden",
              "code": 403,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "c6739552-ccc9-4add-8cbf-1f8f0451b6e3",
              "name": "Not Found",
              "originalRequest": {
                "url": {
                  "path": [
                    "jihuawai",
                    "jihuawai3"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Not Found",
              "code": 404,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test code-diff using AI Type Open AI and AI Model deepseek-ai/DeepSeek-R1-Distill-Llama-70B\n\n\nTest generated for /jihuawai/jihuawai3?password=<string>&userName=<string> for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"OK\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n          pm.response.to.have.header(\"Content-Type\");\n\nif (pm.response.code == 401){\n    pm.test(\"Unauthorized\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n      });\n\n    }\n\nif (pm.response.code == 403){\n    pm.test(\"Forbidden\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Forbidden\");\n      });\n\n    }\n\nif (pm.response.code == 404){\n    pm.test(\"Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n      });\n\n    }\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "b152bca0-86e7-4213-8e49-a9fb44402c82",
          "name": "getTest2",
          "request": {
            "name": "getTest2",
            "description": {},
            "url": {
              "path": [
                "jihuawai",
                "jihuawai4"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": false,
                  "key": "password",
                  "value": "{{password}}",
                  "description": "password"
                },
                {
                  "disabled": false,
                  "key": "userName",
                  "value": "{{userName}}",
                  "description": "userName"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "method": "GET",
            "auth": null
          },
          "response": [
            {
              "id": "e630df27-83af-4e1c-9f43-e8c0c1beb3b4",
              "name": "OK",
              "originalRequest": {
                "url": {
                  "path": [
                    "jihuawai",
                    "jihuawai4"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "body": "ea tempor",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "db882da3-6288-4647-ba02-03746a307503",
              "name": "Unauthorized",
              "originalRequest": {
                "url": {
                  "path": [
                    "jihuawai",
                    "jihuawai4"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "01307649-28de-4d56-a341-cd89596233cc",
              "name": "Forbidden",
              "originalRequest": {
                "url": {
                  "path": [
                    "jihuawai",
                    "jihuawai4"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Forbidden",
              "code": 403,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "8ae8b361-3abf-4a9a-b151-60dbf80727bd",
              "name": "Not Found",
              "originalRequest": {
                "url": {
                  "path": [
                    "jihuawai",
                    "jihuawai4"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Not Found",
              "code": 404,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test code-diff using AI Type Open AI and AI Model deepseek-ai/DeepSeek-R1-Distill-Llama-70B\n\n\nTest generated for /jihuawai/jihuawai4?password=<string>&userName=<string> for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"OK\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n          pm.response.to.have.header(\"Content-Type\");\n\nif (pm.response.code == 401){\n    pm.test(\"Unauthorized\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n      });\n\n    }\n\nif (pm.response.code == 403){\n    pm.test(\"Forbidden\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Forbidden\");\n      });\n\n    }\n\nif (pm.response.code == 404){\n    pm.test(\"Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n      });\n\n    }\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "36eb2389-d6f6-4141-adae-3234c60ec105",
          "name": "getTest5",
          "request": {
            "name": "getTest5",
            "description": {},
            "url": {
              "path": [
                "jihuawai",
                "jihuawai5"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": false,
                  "key": "password",
                  "value": "{{password}}",
                  "description": "password"
                },
                {
                  "disabled": false,
                  "key": "userName",
                  "value": "{{userName}}",
                  "description": "userName"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "method": "GET",
            "auth": null
          },
          "response": [
            {
              "id": "bd22041d-1cff-4725-acd3-82a539e82794",
              "name": "OK",
              "originalRequest": {
                "url": {
                  "path": [
                    "jihuawai",
                    "jihuawai5"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "body": "ea tempor",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "b2779574-f770-4005-8353-155bd183e815",
              "name": "Unauthorized",
              "originalRequest": {
                "url": {
                  "path": [
                    "jihuawai",
                    "jihuawai5"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "9a49828a-d595-43ef-bb79-25bceceb475f",
              "name": "Forbidden",
              "originalRequest": {
                "url": {
                  "path": [
                    "jihuawai",
                    "jihuawai5"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Forbidden",
              "code": 403,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "461871f2-c818-4e65-9eb8-486cd5c46223",
              "name": "Not Found",
              "originalRequest": {
                "url": {
                  "path": [
                    "jihuawai",
                    "jihuawai5"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Not Found",
              "code": 404,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test code-diff using AI Type Open AI and AI Model deepseek-ai/DeepSeek-R1-Distill-Llama-70B\n\n\nTest generated for /jihuawai/jihuawai5?password=<string>&userName=<string> for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"OK\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n          pm.response.to.have.header(\"Content-Type\");\n\nif (pm.response.code == 401){\n    pm.test(\"Unauthorized\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n      });\n\n    }\n\nif (pm.response.code == 403){\n    pm.test(\"Forbidden\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Forbidden\");\n      });\n\n    }\n\nif (pm.response.code == 404){\n    pm.test(\"Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n      });\n\n    }\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "18dbbc85-d822-49ec-9c34-b46df46364b1",
          "name": "getTest6",
          "request": {
            "name": "getTest6",
            "description": {},
            "url": {
              "path": [
                "jihuawai",
                "jihuawai6"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": false,
                  "key": "password",
                  "value": "{{password}}",
                  "description": "password"
                },
                {
                  "disabled": false,
                  "key": "userName",
                  "value": "{{userName}}",
                  "description": "userName"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "method": "GET",
            "auth": null
          },
          "response": [
            {
              "id": "d61a9c17-a4c1-47e0-a215-835eff548fd9",
              "name": "OK",
              "originalRequest": {
                "url": {
                  "path": [
                    "jihuawai",
                    "jihuawai6"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "body": "ea tempor",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "66b31b58-6999-498d-86e2-2f37322ae528",
              "name": "Unauthorized",
              "originalRequest": {
                "url": {
                  "path": [
                    "jihuawai",
                    "jihuawai6"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "b2bcf815-47d4-46c7-b763-0520889e4020",
              "name": "Forbidden",
              "originalRequest": {
                "url": {
                  "path": [
                    "jihuawai",
                    "jihuawai6"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Forbidden",
              "code": 403,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "60de5543-c984-4fba-a679-d91324ab8cbc",
              "name": "Not Found",
              "originalRequest": {
                "url": {
                  "path": [
                    "jihuawai",
                    "jihuawai6"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Not Found",
              "code": 404,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test code-diff using AI Type Open AI and AI Model deepseek-ai/DeepSeek-R1-Distill-Llama-70B\n\n\nTest generated for /jihuawai/jihuawai6?password=<string>&userName=<string> for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"OK\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n          pm.response.to.have.header(\"Content-Type\");\n\nif (pm.response.code == 401){\n    pm.test(\"Unauthorized\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n      });\n\n    }\n\nif (pm.response.code == 403){\n    pm.test(\"Forbidden\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Forbidden\");\n      });\n\n    }\n\nif (pm.response.code == 404){\n    pm.test(\"Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n      });\n\n    }\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "19622f82-1333-4c57-aeef-69bbda608b2c",
          "name": "getTest7",
          "request": {
            "name": "getTest7",
            "description": {},
            "url": {
              "path": [
                "jihuawai",
                "jihuawai7"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": false,
                  "key": "password",
                  "value": "{{password}}",
                  "description": "password"
                },
                {
                  "disabled": false,
                  "key": "userName",
                  "value": "{{userName}}",
                  "description": "userName"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "method": "GET",
            "auth": null
          },
          "response": [
            {
              "id": "9b56988b-0e28-448f-a7f2-50d950a97ade",
              "name": "OK",
              "originalRequest": {
                "url": {
                  "path": [
                    "jihuawai",
                    "jihuawai7"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "body": "ea tempor",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "6c8fd17b-0630-447a-870d-c87668aa5fbf",
              "name": "Unauthorized",
              "originalRequest": {
                "url": {
                  "path": [
                    "jihuawai",
                    "jihuawai7"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "128e5ee2-6962-464c-b5e4-feeee1dba569",
              "name": "Forbidden",
              "originalRequest": {
                "url": {
                  "path": [
                    "jihuawai",
                    "jihuawai7"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Forbidden",
              "code": 403,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "99113c4d-ed64-4883-8042-7713dc63ab13",
              "name": "Not Found",
              "originalRequest": {
                "url": {
                  "path": [
                    "jihuawai",
                    "jihuawai7"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Not Found",
              "code": 404,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test code-diff using AI Type Open AI and AI Model deepseek-ai/DeepSeek-R1-Distill-Llama-70B\n\n\nTest generated for /jihuawai/jihuawai7?password=<string>&userName=<string> for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"OK\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n          pm.response.to.have.header(\"Content-Type\");\n\nif (pm.response.code == 401){\n    pm.test(\"Unauthorized\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n      });\n\n    }\n\nif (pm.response.code == 403){\n    pm.test(\"Forbidden\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Forbidden\");\n      });\n\n    }\n\nif (pm.response.code == 404){\n    pm.test(\"Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n      });\n\n    }\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        }
      ],
      "event": []
    },
    {
      "id": "d29ce3b0-8e58-4452-a7b2-bc8f957565e0",
      "name": "jihuawai2",
      "item": [
        {
          "id": "d827c7fc-f8e2-460f-a0e2-44b227131f9c",
          "name": "getTest111",
          "request": {
            "name": "getTest111",
            "description": {},
            "url": {
              "path": [
                "jihuawai2",
                "get111"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": false,
                  "key": "password",
                  "value": "{{password}}",
                  "description": "password"
                },
                {
                  "disabled": false,
                  "key": "userName",
                  "value": "{{userName}}",
                  "description": "userName"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "method": "GET",
            "auth": null
          },
          "response": [
            {
              "id": "76e54ced-e0fb-4720-be1d-3555034a9855",
              "name": "OK",
              "originalRequest": {
                "url": {
                  "path": [
                    "jihuawai2",
                    "get111"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "body": "ea tempor",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "e3983590-167f-4e42-a6de-17f7f331986e",
              "name": "Unauthorized",
              "originalRequest": {
                "url": {
                  "path": [
                    "jihuawai2",
                    "get111"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "2ebdc91f-f6c6-4f79-b5a6-8bbc6774a9ef",
              "name": "Forbidden",
              "originalRequest": {
                "url": {
                  "path": [
                    "jihuawai2",
                    "get111"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Forbidden",
              "code": 403,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "d5d6c349-b93b-458e-b7dc-bb7cd7a2bf1b",
              "name": "Not Found",
              "originalRequest": {
                "url": {
                  "path": [
                    "jihuawai2",
                    "get111"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Not Found",
              "code": 404,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test code-diff using AI Type Open AI and AI Model deepseek-ai/DeepSeek-R1-Distill-Llama-70B\n\n\nTest generated for /jihuawai2/get111?password=<string>&userName=<string> for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"OK\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n          pm.response.to.have.header(\"Content-Type\");\n\nif (pm.response.code == 401){\n    pm.test(\"Unauthorized\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n      });\n\n    }\n\nif (pm.response.code == 403){\n    pm.test(\"Forbidden\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Forbidden\");\n      });\n\n    }\n\nif (pm.response.code == 404){\n    pm.test(\"Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n      });\n\n    }\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "1c160d99-dfc6-4d34-950d-6c44498da7c5",
          "name": "getTest222",
          "request": {
            "name": "getTest222",
            "description": {},
            "url": {
              "path": [
                "jihuawai2",
                "get222"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": false,
                  "key": "password",
                  "value": "{{password}}",
                  "description": "password"
                },
                {
                  "disabled": false,
                  "key": "userName",
                  "value": "{{userName}}",
                  "description": "userName"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "method": "GET",
            "auth": null
          },
          "response": [
            {
              "id": "a8c2e5c1-91bb-4bce-a220-b2d5bc24ce2f",
              "name": "OK",
              "originalRequest": {
                "url": {
                  "path": [
                    "jihuawai2",
                    "get222"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "body": "ea tempor",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "033b5036-0d12-48db-8c35-130e999735a4",
              "name": "Unauthorized",
              "originalRequest": {
                "url": {
                  "path": [
                    "jihuawai2",
                    "get222"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "27dcb18d-a239-486f-8039-c426578d8424",
              "name": "Forbidden",
              "originalRequest": {
                "url": {
                  "path": [
                    "jihuawai2",
                    "get222"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Forbidden",
              "code": 403,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "c198058b-2122-4edf-b265-87674328c2d6",
              "name": "Not Found",
              "originalRequest": {
                "url": {
                  "path": [
                    "jihuawai2",
                    "get222"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Not Found",
              "code": 404,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test code-diff using AI Type Open AI and AI Model deepseek-ai/DeepSeek-R1-Distill-Llama-70B\n\n\nTest generated for /jihuawai2/get222?password=<string>&userName=<string> for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"OK\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n          pm.response.to.have.header(\"Content-Type\");\n\nif (pm.response.code == 401){\n    pm.test(\"Unauthorized\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n      });\n\n    }\n\nif (pm.response.code == 403){\n    pm.test(\"Forbidden\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Forbidden\");\n      });\n\n    }\n\nif (pm.response.code == 404){\n    pm.test(\"Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n      });\n\n    }\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "d1f966c0-d5a0-410f-96a5-b70ec996ae39",
          "name": "jiTest1",
          "request": {
            "name": "jiTest1",
            "description": {},
            "url": {
              "path": [
                "jihuawai2",
                "ji1"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": false,
                  "key": "password",
                  "value": "{{password}}",
                  "description": "password"
                },
                {
                  "disabled": false,
                  "key": "userName",
                  "value": "{{userName}}",
                  "description": "userName"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "method": "GET",
            "auth": null
          },
          "response": [
            {
              "id": "003abddd-b9cf-4187-9173-94bcb611636c",
              "name": "OK",
              "originalRequest": {
                "url": {
                  "path": [
                    "jihuawai2",
                    "ji1"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "body": "ea tempor",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "0839c946-7a88-49af-97b1-8090c644fe68",
              "name": "Unauthorized",
              "originalRequest": {
                "url": {
                  "path": [
                    "jihuawai2",
                    "ji1"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "f433ebba-29f1-41e8-8859-fa8318ac7f0e",
              "name": "Forbidden",
              "originalRequest": {
                "url": {
                  "path": [
                    "jihuawai2",
                    "ji1"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Forbidden",
              "code": 403,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "0af2c778-59f1-442d-ad47-bd8a93a61a3d",
              "name": "Not Found",
              "originalRequest": {
                "url": {
                  "path": [
                    "jihuawai2",
                    "ji1"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Not Found",
              "code": 404,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test code-diff using AI Type Open AI and AI Model deepseek-ai/DeepSeek-R1-Distill-Llama-70B\n\n\nTest generated for /jihuawai2/ji1?password=<string>&userName=<string> for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"OK\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n          pm.response.to.have.header(\"Content-Type\");\n\nif (pm.response.code == 401){\n    pm.test(\"Unauthorized\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n      });\n\n    }\n\nif (pm.response.code == 403){\n    pm.test(\"Forbidden\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Forbidden\");\n      });\n\n    }\n\nif (pm.response.code == 404){\n    pm.test(\"Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n      });\n\n    }\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "94693cb1-2fa5-4132-9e14-d34106e1e007",
          "name": "jiTest2",
          "request": {
            "name": "jiTest2",
            "description": {},
            "url": {
              "path": [
                "jihuawai2",
                "ji2"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": false,
                  "key": "password",
                  "value": "{{password}}",
                  "description": "password"
                },
                {
                  "disabled": false,
                  "key": "userName",
                  "value": "{{userName}}",
                  "description": "userName"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "method": "GET",
            "auth": null
          },
          "response": [
            {
              "id": "9232d67e-d0e7-4306-8741-b9725ac479a3",
              "name": "OK",
              "originalRequest": {
                "url": {
                  "path": [
                    "jihuawai2",
                    "ji2"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "body": "ea tempor",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "e9fb28fa-248d-4e02-a7cb-c8e882efa330",
              "name": "Unauthorized",
              "originalRequest": {
                "url": {
                  "path": [
                    "jihuawai2",
                    "ji2"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "54848036-a43c-4ded-9882-ae314e824b99",
              "name": "Forbidden",
              "originalRequest": {
                "url": {
                  "path": [
                    "jihuawai2",
                    "ji2"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Forbidden",
              "code": 403,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "b230e26e-231e-4d1d-93e0-632d4a0b4355",
              "name": "Not Found",
              "originalRequest": {
                "url": {
                  "path": [
                    "jihuawai2",
                    "ji2"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Not Found",
              "code": 404,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test code-diff using AI Type Open AI and AI Model deepseek-ai/DeepSeek-R1-Distill-Llama-70B\n\n\nTest generated for /jihuawai2/ji2?password=<string>&userName=<string> for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"OK\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n          pm.response.to.have.header(\"Content-Type\");\n\nif (pm.response.code == 401){\n    pm.test(\"Unauthorized\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n      });\n\n    }\n\nif (pm.response.code == 403){\n    pm.test(\"Forbidden\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Forbidden\");\n      });\n\n    }\n\nif (pm.response.code == 404){\n    pm.test(\"Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n      });\n\n    }\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "aaecd998-566e-42cd-a06f-0272753a0e45",
          "name": "addTest1",
          "request": {
            "name": "addTest1",
            "description": {},
            "url": {
              "path": [
                "jihuawai2",
                "jihuawai1"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": false,
                  "key": "password",
                  "value": "{{password}}",
                  "description": "password"
                },
                {
                  "disabled": false,
                  "key": "userName",
                  "value": "{{userName}}",
                  "description": "userName"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "method": "GET",
            "auth": null
          },
          "response": [
            {
              "id": "2746f9a9-9f26-4b9b-8b36-baa558d48a13",
              "name": "OK",
              "originalRequest": {
                "url": {
                  "path": [
                    "jihuawai2",
                    "jihuawai1"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "body": "ea tempor",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "0d0bb376-1a82-4e17-a857-42626c34cd6b",
              "name": "Unauthorized",
              "originalRequest": {
                "url": {
                  "path": [
                    "jihuawai2",
                    "jihuawai1"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "c5071e42-4348-4da2-b546-a0fce847b2be",
              "name": "Forbidden",
              "originalRequest": {
                "url": {
                  "path": [
                    "jihuawai2",
                    "jihuawai1"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Forbidden",
              "code": 403,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "68f52ad3-acf7-4708-a348-3e97ae93c553",
              "name": "Not Found",
              "originalRequest": {
                "url": {
                  "path": [
                    "jihuawai2",
                    "jihuawai1"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Not Found",
              "code": 404,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test code-diff using AI Type Open AI and AI Model deepseek-ai/DeepSeek-R1-Distill-Llama-70B\n\n\nTest generated for /jihuawai2/jihuawai1?password=<string>&userName=<string> for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"OK\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n          pm.response.to.have.header(\"Content-Type\");\n\nif (pm.response.code == 401){\n    pm.test(\"Unauthorized\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n      });\n\n    }\n\nif (pm.response.code == 403){\n    pm.test(\"Forbidden\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Forbidden\");\n      });\n\n    }\n\nif (pm.response.code == 404){\n    pm.test(\"Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n      });\n\n    }\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "86a4ffc8-ec30-4e04-b895-1f197c8e1a41",
          "name": "addTest2",
          "request": {
            "name": "addTest2",
            "description": {},
            "url": {
              "path": [
                "jihuawai2",
                "jihuawai2"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": false,
                  "key": "password",
                  "value": "{{password}}",
                  "description": "password"
                },
                {
                  "disabled": false,
                  "key": "userName",
                  "value": "{{userName}}",
                  "description": "userName"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "method": "GET",
            "auth": null
          },
          "response": [
            {
              "id": "5dd4fa96-e771-4585-880e-5c23a86fc18a",
              "name": "OK",
              "originalRequest": {
                "url": {
                  "path": [
                    "jihuawai2",
                    "jihuawai2"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "body": "ea tempor",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "2499059b-acca-49bb-bddc-a84e8735a5e3",
              "name": "Unauthorized",
              "originalRequest": {
                "url": {
                  "path": [
                    "jihuawai2",
                    "jihuawai2"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "25a83bda-a125-40e4-9c65-91180c39d970",
              "name": "Forbidden",
              "originalRequest": {
                "url": {
                  "path": [
                    "jihuawai2",
                    "jihuawai2"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Forbidden",
              "code": 403,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "a219e8e5-4ca0-4589-8d95-8635fbd8a7a9",
              "name": "Not Found",
              "originalRequest": {
                "url": {
                  "path": [
                    "jihuawai2",
                    "jihuawai2"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Not Found",
              "code": 404,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test code-diff using AI Type Open AI and AI Model deepseek-ai/DeepSeek-R1-Distill-Llama-70B\n\n\nTest generated for /jihuawai2/jihuawai2?password=<string>&userName=<string> for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"OK\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n          pm.response.to.have.header(\"Content-Type\");\n\nif (pm.response.code == 401){\n    pm.test(\"Unauthorized\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n      });\n\n    }\n\nif (pm.response.code == 403){\n    pm.test(\"Forbidden\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Forbidden\");\n      });\n\n    }\n\nif (pm.response.code == 404){\n    pm.test(\"Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n      });\n\n    }\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "2111ba99-413a-49cf-9c33-d951efa72043",
          "name": "getTest1",
          "request": {
            "name": "getTest1",
            "description": {},
            "url": {
              "path": [
                "jihuawai2",
                "jihuawai3"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": false,
                  "key": "password",
                  "value": "{{password}}",
                  "description": "password"
                },
                {
                  "disabled": false,
                  "key": "userName",
                  "value": "{{userName}}",
                  "description": "userName"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "method": "GET",
            "auth": null
          },
          "response": [
            {
              "id": "7c931073-74d2-4b1a-a790-a109fd039bde",
              "name": "OK",
              "originalRequest": {
                "url": {
                  "path": [
                    "jihuawai2",
                    "jihuawai3"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "body": "ea tempor",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "260c11b0-cf56-4781-9486-47c74eefe2ec",
              "name": "Unauthorized",
              "originalRequest": {
                "url": {
                  "path": [
                    "jihuawai2",
                    "jihuawai3"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "69b2aaab-246a-45d5-8fb8-ba24c5dfab49",
              "name": "Forbidden",
              "originalRequest": {
                "url": {
                  "path": [
                    "jihuawai2",
                    "jihuawai3"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Forbidden",
              "code": 403,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "afa7f54f-322b-442a-9fc6-1ac7714c5155",
              "name": "Not Found",
              "originalRequest": {
                "url": {
                  "path": [
                    "jihuawai2",
                    "jihuawai3"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Not Found",
              "code": 404,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test code-diff using AI Type Open AI and AI Model deepseek-ai/DeepSeek-R1-Distill-Llama-70B\n\n\nTest generated for /jihuawai2/jihuawai3?password=<string>&userName=<string> for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"OK\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n          pm.response.to.have.header(\"Content-Type\");\n\nif (pm.response.code == 401){\n    pm.test(\"Unauthorized\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n      });\n\n    }\n\nif (pm.response.code == 403){\n    pm.test(\"Forbidden\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Forbidden\");\n      });\n\n    }\n\nif (pm.response.code == 404){\n    pm.test(\"Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n      });\n\n    }\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "1d61c233-75fd-4fd2-8544-81c6ade7821d",
          "name": "getTest2",
          "request": {
            "name": "getTest2",
            "description": {},
            "url": {
              "path": [
                "jihuawai2",
                "jihuawai4"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": false,
                  "key": "password",
                  "value": "{{password}}",
                  "description": "password"
                },
                {
                  "disabled": false,
                  "key": "userName",
                  "value": "{{userName}}",
                  "description": "userName"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "method": "GET",
            "auth": null
          },
          "response": [
            {
              "id": "fe7c11f6-d676-4a6d-9209-0668e5e94c99",
              "name": "OK",
              "originalRequest": {
                "url": {
                  "path": [
                    "jihuawai2",
                    "jihuawai4"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "body": "ea tempor",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "07cf275d-84d6-4c02-b7b8-a1f9a6bcf2a8",
              "name": "Unauthorized",
              "originalRequest": {
                "url": {
                  "path": [
                    "jihuawai2",
                    "jihuawai4"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "6843ba63-f809-4afe-bd10-38a416126ce7",
              "name": "Forbidden",
              "originalRequest": {
                "url": {
                  "path": [
                    "jihuawai2",
                    "jihuawai4"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Forbidden",
              "code": 403,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "e20ff34f-3e70-4a69-8b2e-a3006c2a0505",
              "name": "Not Found",
              "originalRequest": {
                "url": {
                  "path": [
                    "jihuawai2",
                    "jihuawai4"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Not Found",
              "code": 404,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test code-diff using AI Type Open AI and AI Model deepseek-ai/DeepSeek-R1-Distill-Llama-70B\n\n\nTest generated for /jihuawai2/jihuawai4?password=<string>&userName=<string> for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"OK\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n          pm.response.to.have.header(\"Content-Type\");\n\nif (pm.response.code == 401){\n    pm.test(\"Unauthorized\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n      });\n\n    }\n\nif (pm.response.code == 403){\n    pm.test(\"Forbidden\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Forbidden\");\n      });\n\n    }\n\nif (pm.response.code == 404){\n    pm.test(\"Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n      });\n\n    }\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "2a498829-ed23-4a41-bd9e-5b516d413394",
          "name": "getTest7",
          "request": {
            "name": "getTest7",
            "description": {},
            "url": {
              "path": [
                "jihuawai2",
                "test",
                "jihuawai3"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": false,
                  "key": "password",
                  "value": "{{password}}",
                  "description": "password"
                },
                {
                  "disabled": false,
                  "key": "userName",
                  "value": "{{userName}}",
                  "description": "userName"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "method": "GET",
            "auth": null
          },
          "response": [
            {
              "id": "69e56b00-6bd2-4ec0-b209-fb46e2607214",
              "name": "OK",
              "originalRequest": {
                "url": {
                  "path": [
                    "jihuawai2",
                    "test",
                    "jihuawai3"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "body": "ea tempor",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "9feb6a5f-04d0-44c3-b673-1c7cc3bf3880",
              "name": "Unauthorized",
              "originalRequest": {
                "url": {
                  "path": [
                    "jihuawai2",
                    "test",
                    "jihuawai3"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "4692bf5d-5b9f-4807-89fd-cdb81738150a",
              "name": "Forbidden",
              "originalRequest": {
                "url": {
                  "path": [
                    "jihuawai2",
                    "test",
                    "jihuawai3"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Forbidden",
              "code": 403,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "4a0e5974-61ae-4417-8c94-dcd9d9bd69f2",
              "name": "Not Found",
              "originalRequest": {
                "url": {
                  "path": [
                    "jihuawai2",
                    "test",
                    "jihuawai3"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Not Found",
              "code": 404,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test code-diff using AI Type Open AI and AI Model deepseek-ai/DeepSeek-R1-Distill-Llama-70B\n\n\nTest generated for /jihuawai2/test/jihuawai3?password=<string>&userName=<string> for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"OK\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n          pm.response.to.have.header(\"Content-Type\");\n\nif (pm.response.code == 401){\n    pm.test(\"Unauthorized\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n      });\n\n    }\n\nif (pm.response.code == 403){\n    pm.test(\"Forbidden\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Forbidden\");\n      });\n\n    }\n\nif (pm.response.code == 404){\n    pm.test(\"Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n      });\n\n    }\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "25f236c9-06d3-43ad-959c-2e8234f363e1",
          "name": "getTest8",
          "request": {
            "name": "getTest8",
            "description": {},
            "url": {
              "path": [
                "jihuawai2",
                "test1",
                "jihuawai3"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": false,
                  "key": "password",
                  "value": "{{password}}",
                  "description": "password"
                },
                {
                  "disabled": false,
                  "key": "userName",
                  "value": "{{userName}}",
                  "description": "userName"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "method": "GET",
            "auth": null
          },
          "response": [
            {
              "id": "c96cf3ba-543a-41ff-a4cd-981fb8ee06ef",
              "name": "OK",
              "originalRequest": {
                "url": {
                  "path": [
                    "jihuawai2",
                    "test1",
                    "jihuawai3"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "body": "ea tempor",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "7ab14658-77c5-4d22-9b1b-1260e2228489",
              "name": "Unauthorized",
              "originalRequest": {
                "url": {
                  "path": [
                    "jihuawai2",
                    "test1",
                    "jihuawai3"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "450ce9f6-f224-4ae3-9945-b6b0a9f437fa",
              "name": "Forbidden",
              "originalRequest": {
                "url": {
                  "path": [
                    "jihuawai2",
                    "test1",
                    "jihuawai3"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Forbidden",
              "code": 403,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "a45035fa-0c27-42ae-8cef-5c2e3ab3e9bc",
              "name": "Not Found",
              "originalRequest": {
                "url": {
                  "path": [
                    "jihuawai2",
                    "test1",
                    "jihuawai3"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "password",
                      "value": "{{password}}"
                    },
                    {
                      "key": "userName",
                      "value": "{{userName}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Not Found",
              "code": 404,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test code-diff using AI Type Open AI and AI Model deepseek-ai/DeepSeek-R1-Distill-Llama-70B\n\n\nTest generated for /jihuawai2/test1/jihuawai3?password=<string>&userName=<string> for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"OK\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n          pm.response.to.have.header(\"Content-Type\");\n\nif (pm.response.code == 401){\n    pm.test(\"Unauthorized\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n      });\n\n    }\n\nif (pm.response.code == 403){\n    pm.test(\"Forbidden\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Forbidden\");\n      });\n\n    }\n\nif (pm.response.code == 404){\n    pm.test(\"Not Found\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n      });\n\n    }\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        }
      ],
      "event": []
    }
  ],
  "event": [],
  "variable": [
    {
      "type": "string",
      "value": "//127.0.0.1:4443",
      "key": "baseUrl"
    },
    {
      "type": "integer",
      "value": 200,
      "key": "statusCode"
    }
  ],
  "info": {
    "_postman_id": "626cc256-a020-4034-a32f-6b929a753b81",
    "name": "Api Documentation",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "description": {
      "content": "Api Documentation",
      "type": "text/plain"
    }
  }
}